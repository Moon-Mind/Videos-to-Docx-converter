    INFO: 2023-09-27 20:00:07,525:               log.py:   20: Logging to /mnt/c/Users/proto/Development/extract_data_from_video/mdpdf.log
   DEBUG: 2023-09-27 20:00:07,526:               cli.py:  103: Klassifizierung.md
    INFO: 2023-09-27 20:00:07,532:         converter.py:   14: Klassifizierung.md
   DEBUG: 2023-09-27 20:00:07,567:      pdf_renderer.py:  470: printSegment: 1 -   Herzlich willkommen zur zweiten IT-Sicherheitsverlesung. Heute geht es nochmal um einführende
   DEBUG: 2023-09-27 20:00:07,572:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,574:      pdf_renderer.py:  470: printSegment: 0
   DEBUG: 2023-09-27 20:00:07,575:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,587:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame0.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:07,609:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,611:      pdf_renderer.py:  470: printSegment: 2 -  
   DEBUG: 2023-09-27 20:00:07,613:      pdf_renderer.py:  470: printSegment: Begrüpfligkeiten und zwar wollen wir uns mit verschiedenen Kategorien von Malware-Beschäftigen
   DEBUG: 2023-09-27 20:00:07,616:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,619:      pdf_renderer.py:  470: printSegment: 3 -   und auch
   DEBUG: 2023-09-27 20:00:07,621:      pdf_renderer.py:  470: printSegment: ein bisschen darüber diskutieren, was es für unterschiedliche Angreifern
   DEBUG: 2023-09-27 20:00:07,623:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,624:      pdf_renderer.py:  470: printSegment: 4 -   Tüten geben kann. Ich beginne mit
   DEBUG: 2023-09-27 20:00:07,625:      pdf_renderer.py:  470: printSegment: einer kleinen Auflässtung,
   DEBUG: 2023-09-27 20:00:07,628:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,667:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame1415.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:07,718:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,721:      pdf_renderer.py:  470: printSegment: 5 -   also wieder was wir heute mit den Teil machen wollen. Ich werde ganz am Anfang noch mal eine kurze
   DEBUG: 2023-09-27 20:00:07,724:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,725:      pdf_renderer.py:  470: printSegment: 6 -  
   DEBUG: 2023-09-27 20:00:07,726:      pdf_renderer.py:  470: printSegment: Wiederholung einbauen, wo ich noch mal sage, welche Sachen aus der letzten Vorlesung zu den
   DEBUG: 2023-09-27 20:00:07,727:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,729:      pdf_renderer.py:  470: printSegment: 7 -  
   DEBUG: 2023-09-27 20:00:07,731:      pdf_renderer.py:  470: printSegment: Grundbegrüffen relevant sind, weil sie eben mal später eventuell auch in der Prüfung
   DEBUG: 2023-09-27 20:00:07,734:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,737:      pdf_renderer.py:  470: printSegment: 8 -   abgefragt werden. Und
   DEBUG: 2023-09-27 20:00:07,740:      pdf_renderer.py:  470: printSegment: dann werden wir uns mal etwas dezidierter mit so Begrüpflichkeiten
   DEBUG: 2023-09-27 20:00:07,742:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,743:      pdf_renderer.py:  470: printSegment: 9 -   beschäftigen, wie Trojanische Ferdin,
   DEBUG: 2023-09-27 20:00:07,745:      pdf_renderer.py:  470: printSegment: Wieren, Würmer. Das sind alles Sachen, die sie wahrscheinlich
   DEBUG: 2023-09-27 20:00:07,746:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,748:      pdf_renderer.py:  470: printSegment: 10 -   intuitiv auch schon kennen. Nur wenn man im
   DEBUG: 2023-09-27 20:00:07,750:      pdf_renderer.py:  470: printSegment: Detail sich die Sachen noch mal anschaut,
   DEBUG: 2023-09-27 20:00:07,751:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,753:      pdf_renderer.py:  470: printSegment: 11 -   dann wird man feststellen, dass es da eben halt auch Unterschiede
   DEBUG: 2023-09-27 20:00:07,754:      pdf_renderer.py:  470: printSegment: in der Art der Schadsoft
   DEBUG: 2023-09-27 20:00:07,756:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,759:      pdf_renderer.py:  470: printSegment: 12 -   vergibt und es ist sehr wichtig, dass sie das auch zu onnen können. Gut, dann, wie
   DEBUG: 2023-09-27 20:00:07,761:      pdf_renderer.py:  470: printSegment: gesagt,
   DEBUG: 2023-09-27 20:00:07,763:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,765:      pdf_renderer.py:  470: printSegment: 13 -   geht es um die Angreifer. Da ist schon mal wichtig zu wissen, dass es keinen Schutz vor einem
   DEBUG: 2023-09-27 20:00:07,767:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,768:      pdf_renderer.py:  470: printSegment: 14 -  
   DEBUG: 2023-09-27 20:00:07,770:      pdf_renderer.py:  470: printSegment: Mächtigenangreifer geben kann. Das hat verschiedene Gründe, es hat einerseits technische Gründe,
   DEBUG: 2023-09-27 20:00:07,772:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,775:      pdf_renderer.py:  470: printSegment: 15 -   aber es hat
   DEBUG: 2023-09-27 20:00:07,778:      pdf_renderer.py:  470: printSegment: auch ökonomische Gründe. Wir werden versuchen, mal so unterschiedliche
   DEBUG: 2023-09-27 20:00:07,780:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,782:      pdf_renderer.py:  470: printSegment: 16 -   angreifertüten uns anzuschauen,
   DEBUG: 2023-09-27 20:00:07,783:      pdf_renderer.py:  470: printSegment: die eben mit unterschiedlicher Motivation und unterschiedlichen
   DEBUG: 2023-09-27 20:00:07,786:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,789:      pdf_renderer.py:  470: printSegment: 17 -   Ressourcen versuchen, ein System
   DEBUG: 2023-09-27 20:00:07,791:      pdf_renderer.py:  470: printSegment: anzugreifen. Dann möchte ich Ihnen noch einen sehr prominentes
   DEBUG: 2023-09-27 20:00:07,793:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,796:      pdf_renderer.py:  470: printSegment: 18 -   Beispiel aus der Literatur vorstellen,
   DEBUG: 2023-09-27 20:00:07,798:      pdf_renderer.py:  470: printSegment: nämlich den ersten Internet-Wohm, den es überhaupt
   DEBUG: 2023-09-27 20:00:07,799:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,802:      pdf_renderer.py:  470: printSegment: 19 -   gegeben hat, wie der aufgebaut war, nach welchen
   DEBUG: 2023-09-27 20:00:07,804:      pdf_renderer.py:  470: printSegment: Designprinzipien der gebaut wurde. Das soll
   DEBUG: 2023-09-27 20:00:07,806:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,809:      pdf_renderer.py:  470: printSegment: 20 -   eben auch innerhalb heute von dieser Vollesung sein. Gut, kurz
   DEBUG: 2023-09-27 20:00:07,811:      pdf_renderer.py:  470: printSegment: um Wiederholungsteil, also was
   DEBUG: 2023-09-27 20:00:07,814:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,816:      pdf_renderer.py:  470: printSegment: 21 -   sich auf jeden Fall für die Klausur wissen sollten, ist, dass es zwei
   DEBUG: 2023-09-27 20:00:07,818:      pdf_renderer.py:  470: printSegment: unterschiedliche
   DEBUG: 2023-09-27 20:00:07,820:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,826:      pdf_renderer.py:  470: printSegment: 22 -   Arten von Sicherheit gibt. Und Sie sollten natürlich unterscheiden können, was ist Safety und
   DEBUG: 2023-09-27 20:00:07,844:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame8053.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:07,865:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,867:      pdf_renderer.py:  470: printSegment: 23 -   was ist Security. Ich würde es jetzt nicht nochmal wiederholen. Würde ich, wenn wir jetzt eine
   DEBUG: 2023-09-27 20:00:07,869:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,871:      pdf_renderer.py:  470: printSegment: 24 -  
   DEBUG: 2023-09-27 20:00:07,872:      pdf_renderer.py:  470: printSegment: präsenzvolle Lesung haben, kurz Interaktiv erfragen. Aber wir haben das jetzt inreichend ausführlich
   DEBUG: 2023-09-27 20:00:07,873:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,874:      pdf_renderer.py:  470: printSegment: 25 -  
   DEBUG: 2023-09-27 20:00:07,877:      pdf_renderer.py:  470: printSegment: diskutiert. Schauen Sie sich dazu einfach noch mal das Video vom letzten von letzten Wochen an,
   DEBUG: 2023-09-27 20:00:07,880:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,882:      pdf_renderer.py:  470: printSegment: 26 -   falls Sie es
   DEBUG: 2023-09-27 20:00:07,883:      pdf_renderer.py:  470: printSegment: noch nicht wissen sollten. Eine andere extreme essenzielle Sache. Und wenn Sie das
   DEBUG: 2023-09-27 20:00:07,885:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,886:      pdf_renderer.py:  470: printSegment: 27 -   nicht wissen, dann sind
   DEBUG: 2023-09-27 20:00:07,888:      pdf_renderer.py:  470: printSegment: Sie im Grunde auch, könnte man sagen, durchgefallen, sind diese drei
   DEBUG: 2023-09-27 20:00:07,890:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,892:      pdf_renderer.py:  470: printSegment: 28 -   wichtigen Schutzziele, die sogenannte
   DEBUG: 2023-09-27 20:00:07,893:      pdf_renderer.py:  470: printSegment: CIA-Triade, die jetzt erst mal nichts mit dem amerikanischen
   DEBUG: 2023-09-27 20:00:07,895:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,898:      pdf_renderer.py:  470: printSegment: 29 -   Geheimdienstituten hat, sondern letztlich geht es
   DEBUG: 2023-09-27 20:00:07,900:      pdf_renderer.py:  470: printSegment: eben darum, nur so eine Islbrücke zu bekommen,
   DEBUG: 2023-09-27 20:00:07,901:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,903:      pdf_renderer.py:  470: printSegment: 30 -   dass man diese Begrifflichkeiten konfiguriert, Entschilität,
   DEBUG: 2023-09-27 20:00:07,906:      pdf_renderer.py:  470: printSegment: Integrity und Erwehle-Bildität nicht
   DEBUG: 2023-09-27 20:00:07,907:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,908:      pdf_renderer.py:  470: printSegment: 31 -   vergisst. Diese also kennen als Begriffe und auch zu einer Nap-Graden zu
   DEBUG: 2023-09-27 20:00:07,908:      pdf_renderer.py:  470: printSegment: können. Das also bei
   DEBUG: 2023-09-27 20:00:07,910:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,912:      pdf_renderer.py:  470: printSegment: 32 -   Vertraudigkeit wirklich nur darum geht, keinen unbefugten Informationsgewinde zu
   DEBUG: 2023-09-27 20:00:07,913:      pdf_renderer.py:  470: printSegment: ermöglichen.
   DEBUG: 2023-09-27 20:00:07,915:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,916:      pdf_renderer.py:  470: printSegment: 33 -   Aber es geht hier erst mal nicht um die Integere Informationen, die im Sinne, dass sie nicht
   DEBUG: 2023-09-27 20:00:07,917:      pdf_renderer.py:  470: printSegment: modifizierbar
   DEBUG: 2023-09-27 20:00:07,918:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,919:      pdf_renderer.py:  470: printSegment: 34 -   sein kann. Dafür haben wir die Integrität, das ist ein anderes Schutzziel und bei Integrität geht es
   DEBUG: 2023-09-27 20:00:07,919:      pdf_renderer.py:  470: printSegment: 35 -   im speziellen dann eben nicht darum, dass es niemand anderes lesen kann, sondern es geht nur darum,
   DEBUG: 2023-09-27 20:00:07,920:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,921:      pdf_renderer.py:  470: printSegment: 36 -  
   DEBUG: 2023-09-27 20:00:07,922:      pdf_renderer.py:  470: printSegment: dass es nicht unbefugt verändert werden kann. Stellen Sie sich vor, zum Beispiel die elektronische
   DEBUG: 2023-09-27 20:00:07,922:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,923:      pdf_renderer.py:  470: printSegment: 37 -   Signature
   DEBUG: 2023-09-27 20:00:07,924:      pdf_renderer.py:  470: printSegment: eines Dokumentes. Das ist ja ein Dokument, was Sie da sehen kann, aber wir wollen, dass
   DEBUG: 2023-09-27 20:00:07,925:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,926:      pdf_renderer.py:  470: printSegment: 38 -   er niemand
   DEBUG: 2023-09-27 20:00:07,927:      pdf_renderer.py:  470: printSegment: unbefugt, da die Unterschrift zum Beispiel austauschen könnte. Das ist eben dann sozusagen
   DEBUG: 2023-09-27 20:00:07,927:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,928:      pdf_renderer.py:  470: printSegment: 39 -   ein ganz andere
   DEBUG: 2023-09-27 20:00:07,929:      pdf_renderer.py:  470: printSegment: Schutzrichtung, die wir hier verfolgen. Bei verfügbarkeit denke ich, es ist auch
   DEBUG: 2023-09-27 20:00:07,930:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,931:      pdf_renderer.py:  470: printSegment: 40 -   relativ klar, dass man die
   DEBUG: 2023-09-27 20:00:07,932:      pdf_renderer.py:  470: printSegment: Dienst, die man bereitstellt, immer verfügbar haben will für
   DEBUG: 2023-09-27 20:00:07,932:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,934:      pdf_renderer.py:  470: printSegment: 41 -   seine Nutzer und wenn das angegriffen wird, dann
   DEBUG: 2023-09-27 20:00:07,936:      pdf_renderer.py:  470: printSegment: wäre eben dieses Schutzziel nicht mehr garantiert.
   DEBUG: 2023-09-27 20:00:07,939:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,941:      pdf_renderer.py:  470: printSegment: 42 -   Gut, wie soll man jetzt die Stärke eines Angeifers
   DEBUG: 2023-09-27 20:00:07,942:      pdf_renderer.py:  470: printSegment: einschätzen? Ich habe hier mal aus dem Andreas
   DEBUG: 2023-09-27 20:00:07,945:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,947:      pdf_renderer.py:  470: printSegment: 43 -   Fitzmanns Kript ein englisches Zitat mit reingenommen, der
   DEBUG: 2023-09-27 20:00:07,949:      pdf_renderer.py:  470: printSegment: uns hier nochmal vergegenwertigt,
   DEBUG: 2023-09-27 20:00:07,952:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,955:      pdf_renderer.py:  470: printSegment: 44 -   dass natürlich ein Schutz vor allem so genannten Omnipotenten-Angreifern
   DEBUG: 2023-09-27 20:00:07,957:      pdf_renderer.py:  470: printSegment: nicht wirklich ist und
   DEBUG: 2023-09-27 20:00:07,960:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,963:      pdf_renderer.py:  470: printSegment: 45 -   dass man deshalb halt verschiedene Angreifermodelle aufstellen muss im Security
   DEBUG: 2023-09-27 20:00:07,965:      pdf_renderer.py:  470: printSegment: Engineering und wir wollen
   DEBUG: 2023-09-27 20:00:07,968:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,970:      pdf_renderer.py:  470: printSegment: 46 -   uns jetzt mal zumindest in der Einführung kurz anschauen, was das denn für
   DEBUG: 2023-09-27 20:00:07,973:      pdf_renderer.py:  470: printSegment: unterschiedliche
   DEBUG: 2023-09-27 20:00:07,974:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,975:      pdf_renderer.py:  470: printSegment: 47 -   Angreifers sein könnten. Man unterscheidet hier in allgemein immer danach, was ist die
   DEBUG: 2023-09-27 20:00:07,976:      pdf_renderer.py:  470: printSegment: Motivation des
   DEBUG: 2023-09-27 20:00:07,977:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,979:      pdf_renderer.py:  470: printSegment: 48 -   Angreifers und was hat er auch so für Ressourcen? Hat er vielleicht spezielle Bedingungen, die
   DEBUG: 2023-09-27 20:00:07,981:      pdf_renderer.py:  470: printSegment: 49 -   ist eben am möglichen halt vielleicht Angreife, Intelligenter, Zylführender durchzuführen als
   DEBUG: 2023-09-27 20:00:07,983:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,985:      pdf_renderer.py:  470: printSegment: 50 -   andere
   DEBUG: 2023-09-27 20:00:07,986:      pdf_renderer.py:  470: printSegment: Menschen. Man unterscheidet hier z.B. den Insider. Der Insider ist jemand, der möglicherweise auch
   DEBUG: 2023-09-27 20:00:07,988:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,990:      pdf_renderer.py:  470: printSegment: 51 -   in dem
   DEBUG: 2023-09-27 20:00:07,991:      pdf_renderer.py:  470: printSegment: Kontext eines Unternehmens tätig ist, dass er vielleicht Angreifen will, deshalb kann
   DEBUG: 2023-09-27 20:00:07,992:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,994:      pdf_renderer.py:  470: printSegment: 52 -   er eben sowas wie Social
   DEBUG: 2023-09-27 20:00:07,995:      pdf_renderer.py:  470: printSegment: Engineering betreiben. Social Engineering bedeutet, erkennt die Leute,
   DEBUG: 2023-09-27 20:00:07,997:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:07,998:      pdf_renderer.py:  470: printSegment: 53 -   die mit diesen Sensiblen
   DEBUG: 2023-09-27 20:00:07,999:      pdf_renderer.py:  470: printSegment: Sicherheitskritischen System arbeiten und er kann aufgrund dessen,
   DEBUG: 2023-09-27 20:00:08,000:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,001:      pdf_renderer.py:  470: printSegment: 54 -   dass er vielleicht mit diesen Menschen
   DEBUG: 2023-09-27 20:00:08,002:      pdf_renderer.py:  470: printSegment: befreundet ist, versuchen Dinge Zugangstaten oder Ähnliches über
   DEBUG: 2023-09-27 20:00:08,003:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,004:      pdf_renderer.py:  470: printSegment: 55 -   die Systeme herauszubekommen. Weil
   DEBUG: 2023-09-27 20:00:08,005:      pdf_renderer.py:  470: printSegment: wenn diese Menschen ihm vertrauen, dann sind sie auch geneigt
   DEBUG: 2023-09-27 20:00:08,007:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,008:      pdf_renderer.py:  470: printSegment: 56 -   eben halt vielleicht Zugangstaten zu geben.
   DEBUG: 2023-09-27 20:00:08,009:      pdf_renderer.py:  470: printSegment: Eine andere Stoßrichtung für einen wirklichen Angreifer
   DEBUG: 2023-09-27 20:00:08,011:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,012:      pdf_renderer.py:  470: printSegment: 57 -   könnte z.B. so genannte Hecker sein. Das sind häufig
   DEBUG: 2023-09-27 20:00:08,013:      pdf_renderer.py:  470: printSegment: Leute, die jetzt gar nicht Interesse daran haben,
   DEBUG: 2023-09-27 20:00:08,014:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,015:      pdf_renderer.py:  470: printSegment: 58 -   z.B. mit ihrem Angriff Geld zu machen. Hier geht es mehr
   DEBUG: 2023-09-27 20:00:08,017:      pdf_renderer.py:  470: printSegment: darum, anderen Leuten zu zeigen,
   DEBUG: 2023-09-27 20:00:08,018:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,019:      pdf_renderer.py:  470: printSegment: 59 -   im Grunde ist es möglich. Ich kann euch zeigen, eure Systeme sind nicht
   DEBUG: 2023-09-27 20:00:08,019:      pdf_renderer.py:  470: printSegment: sicher. Ich kann daraus auch
   DEBUG: 2023-09-27 20:00:08,020:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,021:      pdf_renderer.py:  470: printSegment: 60 -   eine persönliche Befriedigung vielleicht ziehen, dass sich anderen das beweisen
   DEBUG: 2023-09-27 20:00:08,023:      pdf_renderer.py:  470: printSegment: kann.
   DEBUG: 2023-09-27 20:00:08,024:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,025:      pdf_renderer.py:  470: printSegment: 61 -   Deshalb steht hier mögliche Motivation, ist hier vielleicht Geldungssucht. Aber ein bisschen ist es
   DEBUG: 2023-09-27 20:00:08,026:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,028:      pdf_renderer.py:  470: printSegment: 62 -  
   DEBUG: 2023-09-27 20:00:08,029:      pdf_renderer.py:  470: printSegment: auch Spaß, dass man überhaupt Freude daran hat, andere Systeme angreifen zu können. Und wenn es
   DEBUG: 2023-09-27 20:00:08,030:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,031:      pdf_renderer.py:  470: printSegment: 63 -   einem
   DEBUG: 2023-09-27 20:00:08,033:      pdf_renderer.py:  470: printSegment: gelingt, dann den cryptografischen Mechanismus zu umgehen, dann ist man natürlich auch sehr stolz auf sich.
   DEBUG: 2023-09-27 20:00:08,034:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,036:      pdf_renderer.py:  470: printSegment: 64 -  
   DEBUG: 2023-09-27 20:00:08,037:      pdf_renderer.py:  470: printSegment: Ein dritter möglicher Kandidat, während professionelle Angreifer, das sind natürlich schon
   DEBUG: 2023-09-27 20:00:08,038:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,038:      pdf_renderer.py:  470: printSegment: 65 -   Leute, die auch
   DEBUG: 2023-09-27 20:00:08,039:      pdf_renderer.py:  470: printSegment: über sehr große Ressourcen verfügen. Also zum Beispiel Geheimdienste wie die NSA,
   DEBUG: 2023-09-27 20:00:08,040:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,041:      pdf_renderer.py:  470: printSegment: 66 -   die natürlich mit
   DEBUG: 2023-09-27 20:00:08,042:      pdf_renderer.py:  470: printSegment: unglaublichem Experten wissen und unglaublich ein hartwereres Sorgen auch dann
   DEBUG: 2023-09-27 20:00:08,043:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,045:      pdf_renderer.py:  470: printSegment: 67 -   eben sehr professionell
   DEBUG: 2023-09-27 20:00:08,046:      pdf_renderer.py:  470: printSegment: Angreife durchführen können. Z.B. eben zu Spiel und Haschitzwecken ist das
   DEBUG: 2023-09-27 20:00:08,048:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,049:      pdf_renderer.py:  470: printSegment: 68 -   mit unteren Notwendig. Ist ja
   DEBUG: 2023-09-27 20:00:08,050:      pdf_renderer.py:  470: printSegment: auch moderne Kriegsführung heute zu dagen. Dann gibt es natürlich auch
   DEBUG: 2023-09-27 20:00:08,052:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,053:      pdf_renderer.py:  470: printSegment: 69 -   noch auf der anderen Seite, wenn
   DEBUG: 2023-09-27 20:00:08,054:      pdf_renderer.py:  470: printSegment: wir jetzt nicht nur die Geheimdienste im Sinne der Gesetzgebung betrachten,
   DEBUG: 2023-09-27 20:00:08,055:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,056:      pdf_renderer.py:  470: printSegment: 70 -   sondern halt auch kriminelle
   DEBUG: 2023-09-27 20:00:08,056:      pdf_renderer.py:  470: printSegment: Vereinigungen, die dann eben zum Beispiel sowas wie Ransom wäre,
   DEBUG: 2023-09-27 20:00:08,057:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,059:      pdf_renderer.py:  470: printSegment: 71 -   entwickeln ja um andere Leute zu
   DEBUG: 2023-09-27 20:00:08,060:      pdf_renderer.py:  470: printSegment: erpressen und damit vielleicht angeholt zu kommen. Gut,
   DEBUG: 2023-09-27 20:00:08,061:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,062:      pdf_renderer.py:  470: printSegment: 72 -   wo sind denn jetzt die Angreifer überall zu suchen?
   DEBUG: 2023-09-27 20:00:08,063:      pdf_renderer.py:  470: printSegment: Wir hatten ja jetzt ja auf der letzten Fuhl schon
   DEBUG: 2023-09-27 20:00:08,064:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,066:      pdf_renderer.py:  470: printSegment: 73 -   diesen Inseider. Das ist erstmal ein wichtiger Aspekt, dass sie
   DEBUG: 2023-09-27 20:00:08,067:      pdf_renderer.py:  470: printSegment: immer darauf achten sollten,
   DEBUG: 2023-09-27 20:00:08,069:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,072:      pdf_renderer.py:  470: printSegment: 74 -   dass sie sämtliche Rollen, die irgendwie mit ihrem Software System zu tun
   DEBUG: 2023-09-27 20:00:08,073:      pdf_renderer.py:  470: printSegment: haben, darauf hin
   DEBUG: 2023-09-27 20:00:08,073:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,074:      pdf_renderer.py:  470: printSegment: 75 -   untersuchen, ob sie möglicherweise auch in einer Angreiferrolle agieren könnten. Und da es
   DEBUG: 2023-09-27 20:00:08,075:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,075:      pdf_renderer.py:  470: printSegment: 76 -   ist dann so, dass es immer Rollen gibt, die man üblicherweise tendenziell erst mal vertrauen würde.
   DEBUG: 2023-09-27 20:00:08,076:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,077:      pdf_renderer.py:  470: printSegment: 77 -   Ja,
   DEBUG: 2023-09-27 20:00:08,078:      pdf_renderer.py:  470: printSegment: zumindest, wenn man jetzt da sehr nahe i-Fran geht und noch nicht so der fahrene
   DEBUG: 2023-09-27 20:00:08,080:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,081:      pdf_renderer.py:  470: printSegment: 78 -   Security Engineering
   DEBUG: 2023-09-27 20:00:08,082:      pdf_renderer.py:  470: printSegment: Experte ist. Und dann gibt es andere Rollen, wo man tendenziell er mistrauscht ist.
   DEBUG: 2023-09-27 20:00:08,083:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,086:      pdf_renderer.py:  470: printSegment: 79 -   Und davon soll man sich so
   DEBUG: 2023-09-27 20:00:08,088:      pdf_renderer.py:  470: printSegment: ein bisschen frei machen, sondern relativ wertfrei,
   DEBUG: 2023-09-27 20:00:08,089:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,091:      pdf_renderer.py:  470: printSegment: 80 -   wenn sich einfach mal alle möglichen Rollen anschauen,
   DEBUG: 2023-09-27 20:00:08,091:      pdf_renderer.py:  470: printSegment: die es gibt und dann überlegen,
   DEBUG: 2023-09-27 20:00:08,092:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,093:      pdf_renderer.py:  470: printSegment: 81 -   was könnten die in Wörstkäse eben für den Schaden anberichten. Und da sind
   DEBUG: 2023-09-27 20:00:08,093:      pdf_renderer.py:  470: printSegment: zum Beispiel auch
   DEBUG: 2023-09-27 20:00:08,094:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,096:      pdf_renderer.py:  470: printSegment: 82 -   Leute zu nennen, die man vielleicht erstmal nicht so denkt, die Entwerfer des Systems,
   DEBUG: 2023-09-27 20:00:08,098:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,099:      pdf_renderer.py:  470: printSegment: 83 - 
   DEBUG: 2023-09-27 20:00:08,101:      pdf_renderer.py:  470: printSegment:  also die Leute, die das System programmiert haben, könnten prinzipiell Angreifer
   DEBUG: 2023-09-27 20:00:08,102:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,103:      pdf_renderer.py:  470: printSegment: 84 -   typen sein Produzenten. Ja,
   DEBUG: 2023-09-27 20:00:08,104:      pdf_renderer.py:  470: printSegment: der Software könnten das sein Betreiber von IT System.
   DEBUG: 2023-09-27 20:00:08,107:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,108:      pdf_renderer.py:  470: printSegment: 85 -   Ja, aber auch natürlich gewöhnliche Nutzer, die jetzt,
   DEBUG: 2023-09-27 20:00:08,109:      pdf_renderer.py:  470: printSegment: weil es ich zum Beispiel in einem
   DEBUG: 2023-09-27 20:00:08,110:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,110:      pdf_renderer.py:  470: printSegment: 86 -   Webshop unterwegs sind, die gelten natürlich auch als gefährdet und so ein
   DEBUG: 2023-09-27 20:00:08,111:      pdf_renderer.py:  470: printSegment: unbedingt
   DEBUG: 2023-09-27 20:00:08,112:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,113:      pdf_renderer.py:  470: printSegment: 87 -   auch überprüfen, ob die, was die in ihren Rollen mit ihren Rechten so verschieden am System
   DEBUG: 2023-09-27 20:00:08,115:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,116:      pdf_renderer.py:  470: printSegment: 88 -  
   DEBUG: 2023-09-27 20:00:08,118:      pdf_renderer.py:  470: printSegment: anrichten können. Ja, ein Grundproblem ist natürlich immer, dass man die Produzenten viel seltene
   DEBUG: 2023-09-27 20:00:08,120:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,121:      pdf_renderer.py:  470: printSegment: 89 -   heute
   DEBUG: 2023-09-27 20:00:08,124:      pdf_renderer.py:  470: printSegment: tagen kennt. Ja, wir laden uns alle mittlerweile auch mal eine freie Software im Internet,
   DEBUG: 2023-09-27 20:00:08,126:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,127:      pdf_renderer.py:  470: printSegment: 90 -   anonym herunter.
   DEBUG: 2023-09-27 20:00:08,127:      pdf_renderer.py:  470: printSegment: Wissen dann nicht so genau, wer als Produzent eigentlich dahinter steht und das
   DEBUG: 2023-09-27 20:00:08,128:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,129:      pdf_renderer.py:  470: printSegment: 91 -   macht es natürlich auch dann,
   DEBUG: 2023-09-27 20:00:08,129:      pdf_renderer.py:  470: printSegment: wenn den Schaden auftreten, auch relativ schwer, da sich sozusagen
   DEBUG: 2023-09-27 20:00:08,130:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,131:      pdf_renderer.py:  470: printSegment: 92 -   auch Entschädigungen zu holen, weil die
   DEBUG: 2023-09-27 20:00:08,133:      pdf_renderer.py:  470: printSegment: Zurechenbarkeit zu für den Mann, dass jetzt hier in dem Fall
   DEBUG: 2023-09-27 20:00:08,134:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,136:      pdf_renderer.py:  470: printSegment: 93 -   dann nicht so richtig gegeben ist. Gut noch ein
   DEBUG: 2023-09-27 20:00:08,137:      pdf_renderer.py:  470: printSegment: paar andere Begrifflichkeiten, die so
   DEBUG: 2023-09-27 20:00:08,138:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,139:      pdf_renderer.py:  470: printSegment: 94 -   nahezu es Einführungsvolle, die so nicht fehlen dürfen. Also es gibt den
   DEBUG: 2023-09-27 20:00:08,141:      pdf_renderer.py:  470: printSegment: Begriff der Wiegnis.
   DEBUG: 2023-09-27 20:00:08,143:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,144:      pdf_renderer.py:  470: printSegment: 95 -   Manchmal findet man auch Verwiegnis von Rebility. Ja, das ist dieses englische Wort
   DEBUG: 2023-09-27 20:00:08,145:      pdf_renderer.py:  470: printSegment: hier und
   DEBUG: 2023-09-27 20:00:08,146:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,147:      pdf_renderer.py:  470: printSegment: 96 -   letztlich geht es darauf, läuft es darauf hinaus, dass ein System verwundbar ist, dass es eine
   DEBUG: 2023-09-27 20:00:08,148:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,150:      pdf_renderer.py:  470: printSegment: 97 -  
   DEBUG: 2023-09-27 20:00:08,152:      pdf_renderer.py:  470: printSegment: Schwachstelle aufweist. Wenn wir das vielleicht in unserem Lapprieb-Wörding veranschaulichen würden,
   DEBUG: 2023-09-27 20:00:08,154:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,155:      pdf_renderer.py:  470: printSegment: 98 -  
   DEBUG: 2023-09-27 20:00:08,157:      pdf_renderer.py:  470: printSegment: könnten wir auch sagen, das ist diese schwächste Fehlerkategorie. Also wir haben jetzt ein
   DEBUG: 2023-09-27 20:00:08,159:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,161:      pdf_renderer.py:  470: printSegment: 99 -   Folk sozusagen in
   DEBUG: 2023-09-27 20:00:08,162:      pdf_renderer.py:  470: printSegment: einem System, also eine Verwundbarkeit kann ja eben zum Beispiel durch
   DEBUG: 2023-09-27 20:00:08,163:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,165:      pdf_renderer.py:  470: printSegment: 100 -   einem Programmierfehler
   DEBUG: 2023-09-27 20:00:08,167:      pdf_renderer.py:  470: printSegment: anstanden sein. Ja und eine Verwundbarkeit des Systems heißt noch
   DEBUG: 2023-09-27 20:00:08,168:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,169:      pdf_renderer.py:  470: printSegment: 101 -   lange nicht, dass sie auch wirklich
   DEBUG: 2023-09-27 20:00:08,170:      pdf_renderer.py:  470: printSegment: ausgenutzt wird, weil sie natürlich als solche auch erst mal
   DEBUG: 2023-09-27 20:00:08,171:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,172:      pdf_renderer.py:  470: printSegment: 102 -   den Angriff an bekannt sein muss. Und das ist
   DEBUG: 2023-09-27 20:00:08,174:      pdf_renderer.py:  470: printSegment: dann sozusagen der Fred dann, wobei Fred war
   DEBUG: 2023-09-27 20:00:08,175:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,176:      pdf_renderer.py:  470: printSegment: 103 -   bei unserer Lapprie-Defenition ja, er hat überbegriffe für die
   DEBUG: 2023-09-27 20:00:08,176:      pdf_renderer.py:  470: printSegment: drei Fehlerarten jetzt hier in
   DEBUG: 2023-09-27 20:00:08,177:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,178:      pdf_renderer.py:  470: printSegment: 104 -   die Zusammenhang, das sind die Definitionen, die kommen aus dem Buch von
   DEBUG: 2023-09-27 20:00:08,179:      pdf_renderer.py:  470: printSegment: der Claudia Eckert.
   DEBUG: 2023-09-27 20:00:08,180:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,181:      pdf_renderer.py:  470: printSegment: 105 -   Ist der Fred ja schon dann die Ausnutzung einer Schwachstelle und Verwundbarkeit. Ja,
   DEBUG: 2023-09-27 20:00:08,182:      pdf_renderer.py:  470: printSegment: das heißt,
   DEBUG: 2023-09-27 20:00:08,183:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,184:      pdf_renderer.py:  470: printSegment: 106 -   das wäre dann im Wörding von Lapprief, vielleicht er der Error oder der Filja. Also irgendetwas,
   DEBUG: 2023-09-27 20:00:08,185:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,187:      pdf_renderer.py:  470: printSegment: 107 -   was dann eben halt auch tatsächlich einer benutzerschnittstelle zu spürbar werden kann. Wenn eben jemand
   DEBUG: 2023-09-27 20:00:08,188:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,189:      pdf_renderer.py:  470: printSegment: 108 -   bewusst dann diese Schwachstelle, die Wannribility des Systems ausnutzt. Ja und Ziel kann natürlich
   DEBUG: 2023-09-27 20:00:08,190:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,191:      pdf_renderer.py:  470: printSegment: 109 -  
   DEBUG: 2023-09-27 20:00:08,192:      pdf_renderer.py:  470: printSegment: immer eines unserer Schutzziele sein. Nebenbei gesagt, es gibt dann noch mehr Schutzziele außer
   DEBUG: 2023-09-27 20:00:08,194:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,195:      pdf_renderer.py:  470: printSegment: 110 -   Daten,
   DEBUG: 2023-09-27 20:00:08,196:      pdf_renderer.py:  470: printSegment: Integrität, Vertrauligkeiten, Verwundbarkeit, die wir dann noch später betrachten. Ja und
   DEBUG: 2023-09-27 20:00:08,197:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,198:      pdf_renderer.py:  470: printSegment: 111 -   entweder ein dritter
   DEBUG: 2023-09-27 20:00:08,199:      pdf_renderer.py:  470: printSegment: wichtiger Begriff ist auch das Risiko. Ja, hier versucht man auch noch so
   DEBUG: 2023-09-27 20:00:08,200:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,201:      pdf_renderer.py:  470: printSegment: 112 -   statistische Daten mit
   DEBUG: 2023-09-27 20:00:08,203:      pdf_renderer.py:  470: printSegment: einzubeziehen. Also wie hoch ist die Wahrscheinlichkeit, dass jemand überhaupt
   DEBUG: 2023-09-27 20:00:08,204:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,206:      pdf_renderer.py:  470: printSegment: 113 -   diese Schwachstelle
   DEBUG: 2023-09-27 20:00:08,208:      pdf_renderer.py:  470: printSegment: ausnutzt und wenn er das tut, wie hoch ist die Wahrscheinlichkeit, dass dadurch
   DEBUG: 2023-09-27 20:00:08,209:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,210:      pdf_renderer.py:  470: printSegment: 114 -   auch einen Schaden eintritt.
   DEBUG: 2023-09-27 20:00:08,211:      pdf_renderer.py:  470: printSegment: Und wenn dies eher als gering angeschätzt wird, dann würde man möglicherweise
   DEBUG: 2023-09-27 20:00:08,213:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,214:      pdf_renderer.py:  470: printSegment: 115 -   auch bei den
   DEBUG: 2023-09-27 20:00:08,216:      pdf_renderer.py:  470: printSegment: Schutzmaßnahmen da eher ein bisschen lockerer vorgehen. Wenn allerdings im Risiko
   DEBUG: 2023-09-27 20:00:08,217:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,218:      pdf_renderer.py:  470: printSegment: 116 -   herauskommt, ist ein
   DEBUG: 2023-09-27 20:00:08,219:      pdf_renderer.py:  470: printSegment: sehr sehr hohes Risiko, betriebswirtschaftliches Risiko für eine Firma, dann
   DEBUG: 2023-09-27 20:00:08,220:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,221:      pdf_renderer.py:  470: printSegment: 117 -   müsste man natürlich sofort
   DEBUG: 2023-09-27 20:00:08,222:      pdf_renderer.py:  470: printSegment: reagieren, wenn der potenzielle Schaden eben ein sehr hoher ist. Gut,
   DEBUG: 2023-09-27 20:00:08,223:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,238:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame45826.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:08,256:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,258:      pdf_renderer.py:  470: printSegment: 118 -   das sollt es mal gewesen sein zu den
   DEBUG: 2023-09-27 20:00:08,259:      pdf_renderer.py:  470: printSegment: ersten Begrifflichkeiten rund um Angreifer. Wir schauen es jetzt
   DEBUG: 2023-09-27 20:00:08,260:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,261:      pdf_renderer.py:  470: printSegment: 119 -   mal unterschiedliche Kategorien von
   DEBUG: 2023-09-27 20:00:08,262:      pdf_renderer.py:  470: printSegment: Schatzoff heran und wir beginnen mit einem sehr prominenten
   DEBUG: 2023-09-27 20:00:08,264:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,265:      pdf_renderer.py:  470: printSegment: 120 -   Vertreter, dem sogenannten Trojanischen
   DEBUG: 2023-09-27 20:00:08,266:      pdf_renderer.py:  470: printSegment: Fährt. Sie wissen sicher alle, dass das ein Begriff ist,
   DEBUG: 2023-09-27 20:00:08,267:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,281:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame46771.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:08,299:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,301:      pdf_renderer.py:  470: printSegment: 121 -   der aus der griechischen Mythologie kommt. Es geht zurück auf eine Geschichte aus dem Trojanischen
   DEBUG: 2023-09-27 20:00:08,302:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,303:      pdf_renderer.py:  470: printSegment: 122 -
   DEBUG: 2023-09-27 20:00:08,304:      pdf_renderer.py:  470: printSegment:   Krieg etwa zwölf bis oder dreizehnt, das Jahrhundert vor Christi, wo es um die Belagerung der Stadt
   DEBUG: 2023-09-27 20:00:08,305:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,306:      pdf_renderer.py:  470: printSegment: 123 -   Trojan
   DEBUG: 2023-09-27 20:00:08,307:      pdf_renderer.py:  470: printSegment: ging durch das griechische Her. Und das Problem war, dass die Griechen einfach aufgrund des
   DEBUG: 2023-09-27 20:00:08,308:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,308:      pdf_renderer.py:  470: printSegment: 124 -   Widerstandes
   DEBUG: 2023-09-27 20:00:08,309:      pdf_renderer.py:  470: printSegment: der Bewohner von der Stadt Trojan diese Stadt nicht einnehmen konnten. Und da gab
   DEBUG: 2023-09-27 20:00:08,310:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2023-09-27 20:00:08,311:      pdf_renderer.py:  470: printSegment: s
   DEBUG: 2023-09-27 20:00:08,312:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,313:      pdf_renderer.py:  470: printSegment: 125 -   dann eben eine
   DEBUG: 2023-09-27 20:00:08,314:      pdf_renderer.py:  470: printSegment: Kriegslist vom Oddyshäus, der sich überlegt hat, wir könnten doch ein höchzendes
   DEBUG: 2023-09-27 20:00:08,315:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,316:      pdf_renderer.py:  470: printSegment: 126 -   Fährt bauen, ein ganz
   DEBUG: 2023-09-27 20:00:08,316:      pdf_renderer.py:  470: printSegment: ganz beeindruckendes höchzendes Fährt, indem wir ganz ganz viele Krieger verstecken,
   DEBUG: 2023-09-27 20:00:08,317:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,318:      pdf_renderer.py:  470: printSegment: 127 -   im Bauch des
   DEBUG: 2023-09-27 20:00:08,318:      pdf_renderer.py:  470: printSegment: Fährtes. Und das haben sie dann gemacht, die Leute von Trojan waren halt
   DEBUG: 2023-09-27 20:00:08,319:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,320:      pdf_renderer.py:  470: printSegment: 128 -   sehr gläubig und hier dieses
   DEBUG: 2023-09-27 20:00:08,321:      pdf_renderer.py:  470: printSegment: beeindruckende Fährt für ein Geschenkottes und wurden es schließlich
   DEBUG: 2023-09-27 20:00:08,321:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,322:      pdf_renderer.py:  470: printSegment: 129 -   in die Stadt und dann das
   DEBUG: 2023-09-27 20:00:08,323:      pdf_renderer.py:  470: printSegment: Nachtskonten halt die Krieger entweichen und dann die Stadt Tore öffnen,
   DEBUG: 2023-09-27 20:00:08,323:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,324:      pdf_renderer.py:  470: printSegment: 130 -   so dass die Griechen dann nach
   DEBUG: 2023-09-27 20:00:08,325:      pdf_renderer.py:  470: printSegment: dieser zienjährigen Belagerung der Stadt endlich diese auch einnehmen konnten.
   DEBUG: 2023-09-27 20:00:08,326:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,326:      pdf_renderer.py:  470: printSegment: 131 -   Das war im Grunde die
   DEBUG: 2023-09-27 20:00:08,327:      pdf_renderer.py:  470: printSegment: Kriegslist, die hier angewendet wurde. Jetzt muss man natürlich sagen, dass
   DEBUG: 2023-09-27 20:00:08,328:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,329:      pdf_renderer.py:  470: printSegment: 132 -   die Definition eines Trojanischen
   DEBUG: 2023-09-27 20:00:08,330:      pdf_renderer.py:  470: printSegment: Fährtes in der Informatik etwas allgemeiner zu interpretieren ist.
   DEBUG: 2023-09-27 20:00:08,330:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,331:      pdf_renderer.py:  470: printSegment: 133 -   Dazu haben wir jetzt mal eine Definition aus
   DEBUG: 2023-09-27 20:00:08,332:      pdf_renderer.py:  470: printSegment: dem Andreas Fitzmanns Kript hier auf die Vorigetan.
   DEBUG: 2023-09-27 20:00:08,332:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,343:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame52030.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:08,358:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,359:      pdf_renderer.py:  470: printSegment: 134 -   Ich les mal vor, ein Systemteil ist ein Trojanisches Fährt, wenn er unter Ausnutzung der
   DEBUG: 2023-09-27 20:00:08,359:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,360:      pdf_renderer.py:  470: printSegment: 135 -   ihm
   DEBUG: 2023-09-27 20:00:08,361:      pdf_renderer.py:  470: printSegment: anvertrautenden Daten und Rechte mehr als das von Mervatete oder von ihm erwartetes falsch
   DEBUG: 2023-09-27 20:00:08,361:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,362:      pdf_renderer.py:  470: printSegment: 136 -   oder nicht tut.
   DEBUG: 2023-09-27 20:00:08,362:      pdf_renderer.py:  470: printSegment: So jetzt kann man sich mal überlegen erstmal, wo in dieser Definition stecken
   DEBUG: 2023-09-27 20:00:08,363:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,373:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame53664.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:08,392:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,393:      pdf_renderer.py:  470: printSegment: 137 -   denn unsere drei Schutzziele und Einschutzziele wäre jetzt in dem Fall die Vertraulichkeit und
   DEBUG: 2023-09-27 20:00:08,394:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,395:      pdf_renderer.py:  470: printSegment: 138 -   das
   DEBUG: 2023-09-27 20:00:08,396:      pdf_renderer.py:  470: printSegment: finden wir in dieser Definition wieder, wenn wir sehen, dass der Trojaner halt dazu führt,
   DEBUG: 2023-09-27 20:00:08,396:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,397:      pdf_renderer.py:  470: printSegment: 139 -   dass mehr als das
   DEBUG: 2023-09-27 20:00:08,398:      pdf_renderer.py:  470: printSegment: von der eigentlichen Software erwartet, passiert. Integrität wäre dann eher,
   DEBUG: 2023-09-27 20:00:08,399:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,399:      pdf_renderer.py:  470: printSegment: 140 -   wenn etwas Falsches passiert und
   DEBUG: 2023-09-27 20:00:08,400:      pdf_renderer.py:  470: printSegment: ja, dass es dann gar nicht tut sozusagen wäre dann
   DEBUG: 2023-09-27 20:00:08,401:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,402:      pdf_renderer.py:  470: printSegment: 141 -   letztlich die verfügbarkeit. Damit es nicht so abstrakt
   DEBUG: 2023-09-27 20:00:08,403:      pdf_renderer.py:  470: printSegment: bleibt, hier ein kleines Speispiel,
   DEBUG: 2023-09-27 20:00:08,403:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,413:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame56050.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:08,428:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,429:      pdf_renderer.py:  470: printSegment: 142 -   stellen sich ein Textedit davor, den sie ganz normal im Alltag verwenden, dann werden natürlich
   DEBUG: 2023-09-27 20:00:08,430:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,430:      pdf_renderer.py:  470: printSegment: 143 -   die
   DEBUG: 2023-09-27 20:00:08,431:      pdf_renderer.py:  470: printSegment: erwartete Funktionalität möglicherweise wird es ja von den meisten Editoren auch unterstützt,
   DEBUG: 2023-09-27 20:00:08,432:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,433:      pdf_renderer.py:  470: printSegment: 144 -   das immer
   DEBUG: 2023-09-27 20:00:08,434:      pdf_renderer.py:  470: printSegment: wären sie irgendwie editieren, automatisch auch mal Daten gespeichert werden soll,
   DEBUG: 2023-09-27 20:00:08,435:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,436:      pdf_renderer.py:  470: printSegment: 145 -   es kleines
   DEBUG: 2023-09-27 20:00:08,436:      pdf_renderer.py:  470: printSegment: Sicherheitsbeck ab. Falls doch mal der Rechner abstürzt, das Programm abstürzt,
   DEBUG: 2023-09-27 20:00:08,437:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,438:      pdf_renderer.py:  470: printSegment: 146 -   dass ihre Daten diese
   DEBUG: 2023-09-27 20:00:08,439:      pdf_renderer.py:  470: printSegment: geschrieben haben, nicht verloren gehen. Gut unerwartet wären natürlich,
   DEBUG: 2023-09-27 20:00:08,440:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,441:      pdf_renderer.py:  470: printSegment: 147 -   wenn bei jedem dieser
   DEBUG: 2023-09-27 20:00:08,442:      pdf_renderer.py:  470: printSegment: automatischen Speicherungen auch noch zusätzlich gleich die Daten an den Entwickler
   DEBUG: 2023-09-27 20:00:08,443:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,444:      pdf_renderer.py:  470: printSegment: 148 -   versendet würden,
   DEBUG: 2023-09-27 20:00:08,444:      pdf_renderer.py:  470: printSegment: dann wäre das eben ein zusätzlich Verhalten, was eben das Schutz hier
   DEBUG: 2023-09-27 20:00:08,445:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,446:      pdf_renderer.py:  470: printSegment: 149 -   Vertraulichkeit verletzen würde. Jetzt
   DEBUG: 2023-09-27 20:00:08,447:      pdf_renderer.py:  470: printSegment: muss man sagen, wenn man versucht solche Datenkanäle zu
   DEBUG: 2023-09-27 20:00:08,447:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,448:      pdf_renderer.py:  470: printSegment: 150 -   entdecken, gibt es ja technische Möglichkeiten,
   DEBUG: 2023-09-27 20:00:08,449:      pdf_renderer.py:  470: printSegment: dass man versucht, zu überprüfen, während sie den
   DEBUG: 2023-09-27 20:00:08,449:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,450:      pdf_renderer.py:  470: printSegment: 151 -   Editoren benutzen, ob es hier einen Datenfang her von
   DEBUG: 2023-09-27 20:00:08,450:      pdf_renderer.py:  470: printSegment: ihrem Rechner nach außerhalb zu anderen
   DEBUG: 2023-09-27 20:00:08,451:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,451:      pdf_renderer.py:  470: printSegment: 152 -   Server, der existiert, sogenannte Kavad-Channels, dann muss man
   DEBUG: 2023-09-27 20:00:08,452:      pdf_renderer.py:  470: printSegment: aber sagen, dass hier technische Grenzen
   DEBUG: 2023-09-27 20:00:08,452:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,452:      pdf_renderer.py:  470: printSegment: 153 -   gesetzt sind, weil man gewisse Bandbreiten einfach nicht mehr
   DEBUG: 2023-09-27 20:00:08,453:      pdf_renderer.py:  470: printSegment: beobachten kann. Und da gehört,
   DEBUG: 2023-09-27 20:00:08,453:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,454:      pdf_renderer.py:  470: printSegment: 154 -   beispielsweise selbst in sich extrem anstrengend, so eine Bandbreite von
   DEBUG: 2023-09-27 20:00:08,455:      pdf_renderer.py:  470: printSegment: einem Bidprosekunde zu,
   DEBUG: 2023-09-27 20:00:08,456:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,457:      pdf_renderer.py:  470: printSegment: 155 -   also die lässt sich nachweislich mit einem Überwachungsmechanismus nicht
   DEBUG: 2023-09-27 20:00:08,458:      pdf_renderer.py:  470: printSegment: nachweisen und das bedeutet,
   DEBUG: 2023-09-27 20:00:08,458:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,459:      pdf_renderer.py:  470: printSegment: 156 -   denn, dass wenn sie das auferdieren, im Jahr doch mindestens bis zu vier
   DEBUG: 2023-09-27 20:00:08,460:      pdf_renderer.py:  470: printSegment: Megabyte transportiert werden
   DEBUG: 2023-09-27 20:00:08,461:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,461:      pdf_renderer.py:  470: printSegment: 157 -   können. In der Realität wird das wahrscheinlich deutlich mehr noch sein, ja
   DEBUG: 2023-09-27 20:00:08,462:      pdf_renderer.py:  470: printSegment: auch an unentdeckten
   DEBUG: 2023-09-27 20:00:08,462:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,463:      pdf_renderer.py:  470: printSegment: 158 -   verdeckten Kanälen, aber ich sage mal, das ist jetzt hier so eine grundsätzliche
   DEBUG: 2023-09-27 20:00:08,464:      pdf_renderer.py:  470: printSegment: Geschichte,
   DEBUG: 2023-09-27 20:00:08,464:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,465:      pdf_renderer.py:  470: printSegment: 159 -   weil wir wollen ja immer diskutieren, ist ein Schutz vom Mächtigenangweifer möglich, selbst
   DEBUG: 2023-09-27 20:00:08,466:      pdf_renderer.py:  470: printSegment: wenn
   DEBUG: 2023-09-27 20:00:08,466:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,467:      pdf_renderer.py:  470: printSegment: 160 -   sie extrem auferntreiben und in diese Hürde kommen sie nicht runter, unter diese Grenze,
   DEBUG: 2023-09-27 20:00:08,467:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,468:      pdf_renderer.py:  470: printSegment: 161 -   weil
   DEBUG: 2023-09-27 20:00:08,469:      pdf_renderer.py:  470: printSegment: das eben technisch unmöglich ist, das zu sehen und dadurch bleibt immer ein Restrisiko,
   DEBUG: 2023-09-27 20:00:08,469:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,470:      pdf_renderer.py:  470: printSegment: 162 -   dass irgendwie doch
   DEBUG: 2023-09-27 20:00:08,470:      pdf_renderer.py:  470: printSegment: Daten nach außen gelangen können. Dann gibt es den Begriff des universalen
   DEBUG: 2023-09-27 20:00:08,471:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,482:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame64433.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:08,504:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,506:      pdf_renderer.py:  470: printSegment: 163 -   Trojanischen Ferdes, wir haben schon mal ein bisschen diskutiert in der letzten Vorlesung,
   DEBUG: 2023-09-27 20:00:08,507:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,508:      pdf_renderer.py:  470: printSegment: 164 -   als ich
   DEBUG: 2023-09-27 20:00:08,509:      pdf_renderer.py:  470: printSegment: Ihnen was über den Bundestrojana erzählt habe. Im Wesentlichen ist ein universelles
   DEBUG: 2023-09-27 20:00:08,510:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,511:      pdf_renderer.py:  470: printSegment: 165 -   Trojanisches Ferd 1, das
   DEBUG: 2023-09-27 20:00:08,512:      pdf_renderer.py:  470: printSegment: im Grunde alle drei Schutzziele angreifen kann. Hier oben haben wir jetzt
   DEBUG: 2023-09-27 20:00:08,513:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,514:      pdf_renderer.py:  470: printSegment: 166 -   den unbefugten
   DEBUG: 2023-09-27 20:00:08,514:      pdf_renderer.py:  470: printSegment: Informationsgewinn, also es wäre die Vertraulichkeit, dann haben wir hier das
   DEBUG: 2023-09-27 20:00:08,515:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,516:      pdf_renderer.py:  470: printSegment: 167 -   unbefugte Modifizieren von
   DEBUG: 2023-09-27 20:00:08,517:      pdf_renderer.py:  470: printSegment: Daten, Integrität und hier, wenn der Trojaner dazu führt, dass zum
   DEBUG: 2023-09-27 20:00:08,518:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,519:      pdf_renderer.py:  470: printSegment: 168 -   Beispiel die Betriebsmittel ihres Rechners
   DEBUG: 2023-09-27 20:00:08,519:      pdf_renderer.py:  470: printSegment: unangemessen aufgebraucht werden, dann beeinträchtigt er natürlich
   DEBUG: 2023-09-27 20:00:08,520:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,521:      pdf_renderer.py:  470: printSegment: 169 -   die Funktionen auf dem Rechner, sie
   DEBUG: 2023-09-27 20:00:08,521:      pdf_renderer.py:  470: printSegment: können plötzlich nicht mehr richtig arbeiten, weil der Rechner ganz
   DEBUG: 2023-09-27 20:00:08,522:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,523:      pdf_renderer.py:  470: printSegment: 170 -   langsam wird und damit wird das Schutz
   DEBUG: 2023-09-27 20:00:08,524:      pdf_renderer.py:  470: printSegment: hier, Welle, Bility, also Verfügbarkeit angegriffen. Ganz
   DEBUG: 2023-09-27 20:00:08,525:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,525:      pdf_renderer.py:  470: printSegment: 171 -   wichtig beim universellen Trojanischen Ferd ist,
   DEBUG: 2023-09-27 20:00:08,526:      pdf_renderer.py:  470: printSegment: dass man von außen als Angreifer dieser Software,
   DEBUG: 2023-09-27 20:00:08,527:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,528:      pdf_renderer.py:  470: printSegment: 172 -   die dann auf dem Rechner des Opfas ist,
   DEBUG: 2023-09-27 20:00:08,529:      pdf_renderer.py:  470: printSegment: Handlungseinweisungen absetzen kann und dass man gegebenen
   DEBUG: 2023-09-27 20:00:08,529:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,530:      pdf_renderer.py:  470: printSegment: 173 -   falls auch sogar Kotstücke nachladen kann,
   DEBUG: 2023-09-27 20:00:08,531:      pdf_renderer.py:  470: printSegment: die man dann auf dem Zielrechner übersetzt und damit
   DEBUG: 2023-09-27 20:00:08,532:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,533:      pdf_renderer.py:  470: printSegment: 174 -   natürlich ein universelles Verhalten produzieren kann.
   DEBUG: 2023-09-27 20:00:08,533:      pdf_renderer.py:  470: printSegment: Alles das war auch bei dem
   DEBUG: 2023-09-27 20:00:08,534:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,534:      pdf_renderer.py:  470: printSegment: 175 -   Bundestrojana eben möglich und dadurch wurde er eben damals auch so massiv
   DEBUG: 2023-09-27 20:00:08,535:      pdf_renderer.py:  470: printSegment: kritisiert, weil das
   DEBUG: 2023-09-27 20:00:08,536:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,536:      pdf_renderer.py:  470: printSegment: 176 -   ja wie gesagt ein Spionagewerkzeug der Bundesregierung war und da sind natürlich
   DEBUG: 2023-09-27 20:00:08,537:      pdf_renderer.py:  470: printSegment: gesetzlich trenzen
   DEBUG: 2023-09-27 20:00:08,538:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,538:      pdf_renderer.py:  470: printSegment: 177 -   gesetzt, also dass man da nicht jeden beliebigen Untube mit dem Trojaner machen darf.
   DEBUG: 2023-09-27 20:00:08,539:      pdf_renderer.py:  470: printSegment: Gut, wenn
   DEBUG: 2023-09-27 20:00:08,540:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,550:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame70242.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:08,566:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,567:      pdf_renderer.py:  470: printSegment: 178 -   wir uns jetzt nochmal anschauen, wie können sich denn eigentlich Trojaner überhaupt unser System ein
   DEBUG: 2023-09-27 20:00:08,568:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,568:      pdf_renderer.py:  470: printSegment: 179
   DEBUG: 2023-09-27 20:00:08,569:      pdf_renderer.py:  470: printSegment: -   Pflanzen, wie entstehen die. Dazu muss man eben versuchen die verschiedenen Rollen nochmal genauer
   DEBUG: 2023-09-27 20:00:08,570:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,571:      pdf_renderer.py:  470: printSegment: 180 -  
   DEBUG: 2023-09-27 20:00:08,571:      pdf_renderer.py:  470: printSegment: zu betrachten, die mit unserem IT-System in Berührung stehen. Normalerweise würden sie jetzt
   DEBUG: 2023-09-27 20:00:08,572:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,573:      pdf_renderer.py:  470: printSegment: 181 -   vielleicht so
   DEBUG: 2023-09-27 20:00:08,574:      pdf_renderer.py:  470: printSegment: eine Art Use-Caste-Diagramm machen als Software-Engineur und würden dann hier so ein IT-System
   DEBUG: 2023-09-27 20:00:08,575:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,576:      pdf_renderer.py:  470: printSegment: 182 -   mit
   DEBUG: 2023-09-27 20:00:08,576:      pdf_renderer.py:  470: printSegment: einigen Funktionsgruppen beschreiben und dann könnten sie sagen, es gibt ein Akteur, der mit dem
   DEBUG: 2023-09-27 20:00:08,577:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,578:      pdf_renderer.py:  470: printSegment: 183 -   System
   DEBUG: 2023-09-27 20:00:08,579:      pdf_renderer.py:  470: printSegment: zu tun hat, das ist der Benutzer. Da gibt dann vielleicht außenstehende Personen, die
   DEBUG: 2023-09-27 20:00:08,579:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,580:      pdf_renderer.py:  470: printSegment: 184 -   eigentlich gar keinen
   DEBUG: 2023-09-27 20:00:08,581:      pdf_renderer.py:  470: printSegment: registrierten Account in dem System haben, aber möglicherweise dadurch, dass
   DEBUG: 2023-09-27 20:00:08,582:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,582:      pdf_renderer.py:  470: printSegment: 185 -   das Internet angeboten wird,
   DEBUG: 2023-09-27 20:00:08,583:      pdf_renderer.py:  470: printSegment: der Dienst eben dann doch die Möglichkeit haben, auf die äußeren
   DEBUG: 2023-09-27 20:00:08,584:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,585:      pdf_renderer.py:  470: printSegment: 186 -   Schnittstellen des System zuzugreifen und
   DEBUG: 2023-09-27 20:00:08,586:      pdf_renderer.py:  470: printSegment: diese eben möglicherweise anzugreifen. Dann gibt es
   DEBUG: 2023-09-27 20:00:08,586:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,587:      pdf_renderer.py:  470: printSegment: 187 -   ein Betreiber des Systems, ja, auch der kann natürlich
   DEBUG: 2023-09-27 20:00:08,588:      pdf_renderer.py:  470: printSegment: auch Dinge tun, die vielleicht nicht so
   DEBUG: 2023-09-27 20:00:08,589:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,589:      pdf_renderer.py:  470: printSegment: 188 -   gedacht sind. Dann gibt es ein Wartungsdienst, den man auf jeden Fall
   DEBUG: 2023-09-27 20:00:08,590:      pdf_renderer.py:  470: printSegment: untersuchen sollte, was kann man
   DEBUG: 2023-09-27 20:00:08,591:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,591:      pdf_renderer.py:  470: printSegment: 189 -   in der Rolle mit den Rechten eines Wartungsdienstes vielleicht tun, dann
   DEBUG: 2023-09-27 20:00:08,592:      pdf_renderer.py:  470: printSegment: den Produzenten und nicht zu
   DEBUG: 2023-09-27 20:00:08,593:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,594:      pdf_renderer.py:  470: printSegment: 190 -   vergessen auch die Entwickler. Und bei den Entwicklern gibt es hier auch
   DEBUG: 2023-09-27 20:00:08,594:      pdf_renderer.py:  470: printSegment: sogar noch so eine transitive
   DEBUG: 2023-09-27 20:00:08,595:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,596:      pdf_renderer.py:  470: printSegment: 191 -   Fortflanzungskette, so nennt man das, das bedeutet, wenn sie ein
   DEBUG: 2023-09-27 20:00:08,597:      pdf_renderer.py:  470: printSegment: In-Worswerkzeug verwenden, um ihr
   DEBUG: 2023-09-27 20:00:08,597:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,598:      pdf_renderer.py:  470: printSegment: 192 -   System zu bauen. Zum Beispiel könnte das eben ein Kompiler sein
   DEBUG: 2023-09-27 20:00:08,599:      pdf_renderer.py:  470: printSegment: oder eben möglicherweise auch ein
   DEBUG: 2023-09-27 20:00:08,600:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,600:      pdf_renderer.py:  470: printSegment: 193 -   Editor. Und dieses In-Worswerkzeug ist kompromittiert, ja, durch einen
   DEBUG: 2023-09-27 20:00:08,601:      pdf_renderer.py:  470: printSegment: Angreifer. Dann kann natürlich
   DEBUG: 2023-09-27 20:00:08,602:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,602:      pdf_renderer.py:  470: printSegment: 194 -   dieses In-Worswerkzeug die Trojana an alle Dokumente, die mit ihm erzeugt
   DEBUG: 2023-09-27 20:00:08,603:      pdf_renderer.py:  470: printSegment: werden, weitergeben. Das
   DEBUG: 2023-09-27 20:00:08,604:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,604:      pdf_renderer.py:  470: printSegment: 195 -   heißt, wenn der Kompiler kompromittiert ist, kann er im Grunde an jedes
   DEBUG: 2023-09-27 20:00:08,605:      pdf_renderer.py:  470: printSegment: Programm, was mit dem
   DEBUG: 2023-09-27 20:00:08,606:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,606:      pdf_renderer.py:  470: printSegment: 196 -   Kompiler selbst übersetzt wird, auch die Schadstoffe weitergeben, was natürlich
   DEBUG: 2023-09-27 20:00:08,607:      pdf_renderer.py:  470: printSegment: dann einen
   DEBUG: 2023-09-27 20:00:08,608:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,608:      pdf_renderer.py:  470: printSegment: 197 -   Explosionsartigen Effekt haben kann, bezüglich der Fortflanzung des Trojana. Und da muss man
   DEBUG: 2023-09-27 20:00:08,609:      pdf_renderer.py:  470: printSegment: halt
   DEBUG: 2023-09-27 20:00:08,610:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,610:      pdf_renderer.py:  470: printSegment: 198 -   dran denken, das sozusagen die Entwickler, also der, der das Programm schreibt, letztlich ein
   DEBUG: 2023-09-27 20:00:08,611:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,612:      pdf_renderer.py:  470: printSegment: 199 -  
   DEBUG: 2023-09-27 20:00:08,612:      pdf_renderer.py:  470: printSegment: Potenzierler-Angreifer sein kann, aber auch der Entwickler B, hier, der eben den Kompiler
   DEBUG: 2023-09-27 20:00:08,613:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,614:      pdf_renderer.py:  470: printSegment: 200 -   beispielsweise
   DEBUG: 2023-09-27 20:00:08,615:      pdf_renderer.py:  470: printSegment: geschrieben hat, könnte ein Potenzierler-Anwickler sein. Naja, und Kompiler selbst müssen
   DEBUG: 2023-09-27 20:00:08,615:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,616:      pdf_renderer.py:  470: printSegment: 201 -   ja auch
   DEBUG: 2023-09-27 20:00:08,617:      pdf_renderer.py:  470: printSegment: irgendwie gebaut werden und so kann man zumindest erstmal konzeptuell sagen, gibt es hier
   DEBUG: 2023-09-27 20:00:08,618:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,619:      pdf_renderer.py:  470: printSegment: 202 -   eine ganz, ganz
   DEBUG: 2023-09-27 20:00:08,619:      pdf_renderer.py:  470: printSegment: lange Kette an Ent-Worswerkzeugen, die im Grunde alle gesichert sein müssten, wenn wir ein
   DEBUG: 2023-09-27 20:00:08,620:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,621:      pdf_renderer.py:  470: printSegment: 203 -  
   DEBUG: 2023-09-27 20:00:08,621:      pdf_renderer.py:  470: printSegment: 100-prozentigen Schutz wollen. Und deshalb wie immer die Aussage Schutz vor dem Allmektigen
   DEBUG: 2023-09-27 20:00:08,622:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,623:      pdf_renderer.py:  470: printSegment: 204 -   Angreifer
   DEBUG: 2023-09-27 20:00:08,624:      pdf_renderer.py:  470: printSegment: ist ökonomisch gar nichts machbar, auch organisatorisch nicht machbar und man muss
   DEBUG: 2023-09-27 20:00:08,625:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,625:      pdf_renderer.py:  470: printSegment: 205 -   immer damit rechnen,
   DEBUG: 2023-09-27 20:00:08,626:      pdf_renderer.py:  470: printSegment: dass möglicherweise noch Westrisigen da sind. Wenn Sie jetzt so eine
   DEBUG: 2023-09-27 20:00:08,627:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,628:      pdf_renderer.py:  470: printSegment: 206 -   Security-Analyse auf Basis zu eines
   DEBUG: 2023-09-27 20:00:08,629:      pdf_renderer.py:  470: printSegment: Modells machen mit den verschiedenen Rollen, sollten Sie vor allem
   DEBUG: 2023-09-27 20:00:08,629:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,630:      pdf_renderer.py:  470: printSegment: 207 -   auch mal daran denken, welche Akteure
   DEBUG: 2023-09-27 20:00:08,631:      pdf_renderer.py:  470: printSegment: können möglicherweise auch gleichzeitig in verschiedenen
   DEBUG: 2023-09-27 20:00:08,631:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,632:      pdf_renderer.py:  470: printSegment: 208 -   Rollen agieren. Ja, kann also zum Beispiel ein
   DEBUG: 2023-09-27 20:00:08,633:      pdf_renderer.py:  470: printSegment: Betreiber gleichzeitig auch Wartungsdienstrechte haben,
   DEBUG: 2023-09-27 20:00:08,634:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,634:      pdf_renderer.py:  470: printSegment: 209 -   ist das möglich in Ihrem System. Ja, und durch diese
   DEBUG: 2023-09-27 20:00:08,635:      pdf_renderer.py:  470: printSegment: Überlappung, wenn eine Person in
   DEBUG: 2023-09-27 20:00:08,636:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,637:      pdf_renderer.py:  470: printSegment: 210 -   mirren Rollen agiert, entsteht halt noch andere möglicherweise
   DEBUG: 2023-09-27 20:00:08,637:      pdf_renderer.py:  470: printSegment: Möglichkeiten für den Angreifer,
   DEBUG: 2023-09-27 20:00:08,638:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,639:      pdf_renderer.py:  470: printSegment: 211 -   die an die man vielleicht zuerst nicht gedacht hat. Gut, jetzt gehen wir ein
   DEBUG: 2023-09-27 20:00:08,640:      pdf_renderer.py:  470: printSegment: bisschen weiter in andere
   DEBUG: 2023-09-27 20:00:08,640:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,641:      pdf_renderer.py:  470: printSegment: 212 -   Arten von Schatzoffware. Wir haben ja schon gesehen, was Trojanische Ferd sind.
   DEBUG: 2023-09-27 20:00:08,642:      pdf_renderer.py:  470: printSegment: Wir wissen jetzt
   DEBUG: 2023-09-27 20:00:08,643:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,643:      pdf_renderer.py:  470: printSegment: 213 -   schon, was ein universelles Trojanisches Ferd ist und dass diese sich eben so transitiv
   DEBUG: 2023-09-27 20:00:08,644:      pdf_renderer.py:  470: printSegment: fortpflanzen können.
   DEBUG: 2023-09-27 20:00:08,645:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,646:      pdf_renderer.py:  470: printSegment: 214 -   Jetzt gehen wir noch mal ein bisschen grundsätzlicher in das Wort Malberg hinein. Das
   DEBUG: 2023-09-27 20:00:08,646:      pdf_renderer.py:  470: printSegment: ist ja ein Kunstwort,
   DEBUG: 2023-09-27 20:00:08,647:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,657:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame84948.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:08,672:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,673:      pdf_renderer.py:  470: printSegment: 215 -   das aus der ausführlichen Variante mal liessisch Software abgeleitet ist. Und wenn wir
   DEBUG: 2023-09-27 20:00:08,674:      pdf_renderer.py:  470: printSegment: das zu Deutsch
   DEBUG: 2023-09-27 20:00:08,674:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,675:      pdf_renderer.py:  470: printSegment: 216 -   übersetzen würden, ist es das halt im Grunde Schatzoffware schädliche, bösewillige
   DEBUG: 2023-09-27 20:00:08,676:      pdf_renderer.py:  470: printSegment: Programme,
   DEBUG: 2023-09-27 20:00:08,677:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,677:      pdf_renderer.py:  470: printSegment: 217 -   ja, dies geben kann. Und letztlich sagt man auch, es ist eine Art Sammelbegriff für diverse
   DEBUG: 2023-09-27 20:00:08,678:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,678:      pdf_renderer.py:  470: printSegment: 218 - 
   DEBUG: 2023-09-27 20:00:08,679:      pdf_renderer.py:  470: printSegment:  Typen von Schatzoffware und wir werden jetzt im Folgenden einfach noch mal anschauen, was es
   DEBUG: 2023-09-27 20:00:08,680:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,680:      pdf_renderer.py:  470: printSegment: 219 -   dafür
   DEBUG: 2023-09-27 20:00:08,681:      pdf_renderer.py:  470: printSegment: welche gibt. Das ist natürlich nicht vollständig. Es gibt sicherlich noch mehr Arten, aber einfach nur
   DEBUG: 2023-09-27 20:00:08,682:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,683:      pdf_renderer.py:  470: printSegment: 220 -   um also
   DEBUG: 2023-09-27 20:00:08,684:      pdf_renderer.py:  470: printSegment: die wichtigsten zu nennen und sie auch ein bisschen gegeneinander abzugrenzen. Normalerweise
   DEBUG: 2023-09-27 20:00:08,684:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,685:      pdf_renderer.py:  470: printSegment: 221 -   mache ich
   DEBUG: 2023-09-27 20:00:08,686:      pdf_renderer.py:  470: printSegment: das immer sehr interaktiv, aber jetzt hier in der Videofolassung will ich mal die Sachen
   DEBUG: 2023-09-27 20:00:08,686:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,687:      pdf_renderer.py:  470: printSegment: 222 -   ja relativ schnell
   DEBUG: 2023-09-27 20:00:08,688:      pdf_renderer.py:  470: printSegment: einführen. Also das Wichtigste beim Virus ist erstmal, dass es sich hierbei um ein passives
   DEBUG: 2023-09-27 20:00:08,689:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,690:      pdf_renderer.py:  470: printSegment: 223 -   Code fragment
   DEBUG: 2023-09-27 20:00:08,690:      pdf_renderer.py:  470: printSegment: handelt. Ja, das bedeutet, der Code selbst ist noch kein ausführbares Programm. Und der
   DEBUG: 2023-09-27 20:00:08,691:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,692:      pdf_renderer.py:  470: printSegment: 224 -   Virus muss sich jetzt
   DEBUG: 2023-09-27 20:00:08,693:      pdf_renderer.py:  470: printSegment: erstmal in ein Wirtprogramm irgendwie andocken. Und dann, wenn dieses Wirtprogramm
   DEBUG: 2023-09-27 20:00:08,694:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,694:      pdf_renderer.py:  470: printSegment: 225 -   durch den Nutzeil,
   DEBUG: 2023-09-27 20:00:08,695:      pdf_renderer.py:  470: printSegment: durch das Betriebssystem, durch den auch immer aktivierte wird, also ausgeführt
   DEBUG: 2023-09-27 20:00:08,696:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,697:      pdf_renderer.py:  470: printSegment: 226 -   wird, erst dann kann der
   DEBUG: 2023-09-27 20:00:08,697:      pdf_renderer.py:  470: printSegment: Virus auch mit seiner Schadfunksionalität etwas Böses im System anrichten.
   DEBUG: 2023-09-27 20:00:08,698:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,699:      pdf_renderer.py:  470: printSegment: 227 -   Also normalerweise hängt sich
   DEBUG: 2023-09-27 20:00:08,700:      pdf_renderer.py:  470: printSegment: der Virus eben an ausführbare Dateien deshalb und nicht an andere
   DEBUG: 2023-09-27 20:00:08,700:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,701:      pdf_renderer.py:  470: printSegment: 228 -   Dateien, weil sonst hat er eben das
   DEBUG: 2023-09-27 20:00:08,702:      pdf_renderer.py:  470: printSegment: Problem, das dann möglicherweise gar nicht ausgeführt wird. Und
   DEBUG: 2023-09-27 20:00:08,703:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,704:      pdf_renderer.py:  470: printSegment: 229 -   er modifiziert im Grunde den
   DEBUG: 2023-09-27 20:00:08,704:      pdf_renderer.py:  470: printSegment: Ausführungsfahrt des Programmes. Ja, wie macht er das? Na das Programm wird
   DEBUG: 2023-09-27 20:00:08,705:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,706:      pdf_renderer.py:  470: printSegment: 230 -   normalerweise ganz normal
   DEBUG: 2023-09-27 20:00:08,707:      pdf_renderer.py:  470: printSegment: aufgerufen und dann wird eben durch das Andorgen an die Datei einen
   DEBUG: 2023-09-27 20:00:08,708:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,708:      pdf_renderer.py:  470: printSegment: 231 -   Umweg über den Wien Code
   DEBUG: 2023-09-27 20:00:08,709:      pdf_renderer.py:  470: printSegment: realisiert und danach springt normalerweise das Programm in dem Ausführungsfahrt
   DEBUG: 2023-09-27 20:00:08,710:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,711:      pdf_renderer.py:  470: printSegment: 232 -   wieder zurück in den
   DEBUG: 2023-09-27 20:00:08,712:      pdf_renderer.py:  470: printSegment: ursprünglichen Programm ablaufen. Das ist so die Idee eines Virus und dadurch kann
   DEBUG: 2023-09-27 20:00:08,712:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,713:      pdf_renderer.py:  470: printSegment: 233 -   man dann eben eine
   DEBUG: 2023-09-27 20:00:08,714:      pdf_renderer.py:  470: printSegment: Zusatzfunktionalität an der eigentlichen Ausführbaran Datei produzieren,
   DEBUG: 2023-09-27 20:00:08,715:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,716:      pdf_renderer.py:  470: printSegment: 234 -   die im Sinne des Angreifers ist.
   DEBUG: 2023-09-27 20:00:08,716:      pdf_renderer.py:  470: printSegment: Gut, jetzt gibt es unterschiedliche Virusarten natürlich. Ja und
   DEBUG: 2023-09-27 20:00:08,717:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,718:      pdf_renderer.py:  470: printSegment: 235 -   die können wir auch jetzt hier nicht alle
   DEBUG: 2023-09-27 20:00:08,719:      pdf_renderer.py:  470: printSegment: behandeln. Ich habe nur mal ein paar Beispiele rausgegriffen.
   DEBUG: 2023-09-27 20:00:08,719:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,720:      pdf_renderer.py:  470: printSegment: 236 -   Sicherlich haben Sie schon mal von den
   DEBUG: 2023-09-27 20:00:08,721:      pdf_renderer.py:  470: printSegment: sogenannten Bootsektorviren gehört, die eben den Master Boot
   DEBUG: 2023-09-27 20:00:08,721:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,722:      pdf_renderer.py:  470: printSegment: 237 -   rekord infizieren, das bedeutet, bevor ihr
   DEBUG: 2023-09-27 20:00:08,723:      pdf_renderer.py:  470: printSegment: Betriebssystem überhaupt installiert ist auf dem Rechner oder
   DEBUG: 2023-09-27 20:00:08,724:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,724:      pdf_renderer.py:  470: printSegment: 238 -   gestartet ist, installiert es schon aber nicht
   DEBUG: 2023-09-27 20:00:08,725:      pdf_renderer.py:  470: printSegment: gestartet ist. Haben Sie den Virus schon auf dem
   DEBUG: 2023-09-27 20:00:08,726:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,727:      pdf_renderer.py:  470: printSegment: 239 -   System und das ist natürlich eine besondere Schwierigkeit,
   DEBUG: 2023-09-27 20:00:08,728:      pdf_renderer.py:  470: printSegment: stellt das da um diese Sachen dann auch
   DEBUG: 2023-09-27 20:00:08,729:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,730:      pdf_renderer.py:  470: printSegment: 240 -   durch Wienskennar und entsprechende Gegenmaßnahmen zu finden
   DEBUG: 2023-09-27 20:00:08,730:      pdf_renderer.py:  470: printSegment: und zu beseitigen.
   DEBUG: 2023-09-27 20:00:08,731:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,732:      pdf_renderer.py:  470: printSegment: 241 -   Ein andere Kategorie sind die sogenannten Dateien oder Linkviren. Das sind also einfach
   DEBUG: 2023-09-27 20:00:08,733:      pdf_renderer.py:  470: printSegment: Dinge,
   DEBUG: 2023-09-27 20:00:08,733:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,734:      pdf_renderer.py:  470: printSegment: 242 -   die sich ja, wie es in Dich an Dateien des Betriebssystems ranhängen oder Dateien die
   DEBUG: 2023-09-27 20:00:08,735:      pdf_renderer.py:  470: printSegment: Benutzersicherheit
   DEBUG: 2023-09-27 20:00:08,736:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,736:      pdf_renderer.py:  470: printSegment: 243 -   auch regelmäßig ausführen, um dann eben den Schadcode zu produzieren. Ihr vielleicht
   DEBUG: 2023-09-27 20:00:08,737:      pdf_renderer.py:  470: printSegment: noch
   DEBUG: 2023-09-27 20:00:08,737:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,738:      pdf_renderer.py:  470: printSegment: 244 -   der Unterschied zwischen Datei und Linkviren, bei Datei-Viren sagt man von der Kategorisierung her,
   DEBUG: 2023-09-27 20:00:08,738:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,739:      pdf_renderer.py:  470: printSegment: 245 -   dass die meistens dazu zuführen, dass danach das Programm, wenn der Virus ausgeführt wurde,
   DEBUG: 2023-09-27 20:00:08,740:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,741:      pdf_renderer.py:  470: printSegment: 246 -   sich
   DEBUG: 2023-09-27 20:00:08,741:      pdf_renderer.py:  470: printSegment: ganz normal weiter verhält, so wie es der Nutzer erwarten würde. Bei Linkviren ist das
   DEBUG: 2023-09-27 20:00:08,742:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,743:      pdf_renderer.py:  470: printSegment: 247 -   nicht unbedingt der
   DEBUG: 2023-09-27 20:00:08,743:      pdf_renderer.py:  470: printSegment: Fall, die können auch dazu führen, dass dann eben ganz ganz anderes
   DEBUG: 2023-09-27 20:00:08,744:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,745:      pdf_renderer.py:  470: printSegment: 248 -   verhalten, passiert oder auch das
   DEBUG: 2023-09-27 20:00:08,746:      pdf_renderer.py:  470: printSegment: Programm insgesamt abstürzt. Dann gibt es die Markovieren,
   DEBUG: 2023-09-27 20:00:08,747:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,748:      pdf_renderer.py:  470: printSegment: 249 -   das sind eben Dinge, die sich jetzt erstmal nach
   DEBUG: 2023-09-27 20:00:08,748:      pdf_renderer.py:  470: printSegment: Regeln nicht einnisten, gleich in ein ausführbarer
   DEBUG: 2023-09-27 20:00:08,749:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,750:      pdf_renderer.py:  470: printSegment: 250 -   Datei, sondern eher in ja Dokumente zum Beispiel von
   DEBUG: 2023-09-27 20:00:08,751:      pdf_renderer.py:  470: printSegment: MSWRT oder also Microsoft Dokumente,
   DEBUG: 2023-09-27 20:00:08,751:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,752:      pdf_renderer.py:  470: printSegment: 251 -   wenn da viel genutzt oder auch Adobe PDFs, also immer dann,
   DEBUG: 2023-09-27 20:00:08,753:      pdf_renderer.py:  470: printSegment: wenn irgendwelche Markwurst mit
   DEBUG: 2023-09-27 20:00:08,753:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,754:      pdf_renderer.py:  470: printSegment: 252 -   eingeflegt sind in die Dokumente oder auch Scriptcode und dann wenn
   DEBUG: 2023-09-27 20:00:08,754:      pdf_renderer.py:  470: printSegment: der Nutzer diese Dokumente dann
   DEBUG: 2023-09-27 20:00:08,755:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,756:      pdf_renderer.py:  470: printSegment: 253 -   nach hinein öffnet mit einer entsprechenden Anwendung, dann wird
   DEBUG: 2023-09-27 20:00:08,757:      pdf_renderer.py:  470: printSegment: sozusagen der infizierte Code erst
   DEBUG: 2023-09-27 20:00:08,757:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,758:      pdf_renderer.py:  470: printSegment: 254 -   zur Ausschörung kommen. Das ist hier die Idee, wenn die Markovieren,
   DEBUG: 2023-09-27 20:00:08,759:      pdf_renderer.py:  470: printSegment: dann gibt die Speicherresistenten
   DEBUG: 2023-09-27 20:00:08,760:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,761:      pdf_renderer.py:  470: printSegment: 255 -   Wieren, bei denen redet man eben davon, wenn es möglich ist ein Virus so
   DEBUG: 2023-09-27 20:00:08,761:      pdf_renderer.py:  470: printSegment: zu schreiben, dass er
   DEBUG: 2023-09-27 20:00:08,762:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,763:      pdf_renderer.py:  470: printSegment: 256 -   nach der Terminierung des Wirtprogramms immer noch im Speicher verbleibt. Also der
   DEBUG: 2023-09-27 20:00:08,764:      pdf_renderer.py:  470: printSegment: ist sozusagen
   DEBUG: 2023-09-27 20:00:08,764:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,765:      pdf_renderer.py:  470: printSegment: 257 -   langlebiger Speicherresistenter als das Wirtprogramm. Dann die Stealth Wieren oder auch
   DEBUG: 2023-09-27 20:00:08,766:      pdf_renderer.py:  470: printSegment: Tarnkappenwieren,
   DEBUG: 2023-09-27 20:00:08,767:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,767:      pdf_renderer.py:  470: printSegment: 258 -   das sind also Wieren, die konzeptuell so gebaut sind, dass sie versuchen, die Programme,
   DEBUG: 2023-09-27 20:00:08,768:      pdf_renderer.py:  470: printSegment: mit denen sie
   DEBUG: 2023-09-27 20:00:08,769:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,769:      pdf_renderer.py:  470: printSegment: 259 -   potenziell entdeckt werden könnten, mitzumannipulieren und dadurch eben besonders schwer
   DEBUG: 2023-09-27 20:00:08,770:      pdf_renderer.py:  470: printSegment: zu entdecken sind.
   DEBUG: 2023-09-27 20:00:08,771:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,772:      pdf_renderer.py:  470: printSegment: 260 -   Also stellen sich zum Beispiel vor, eine Schatzoffe kommt auf ihren Rechner und ist dazu
   DEBUG: 2023-09-27 20:00:08,772:      pdf_renderer.py:  470: printSegment: eine Lage
   DEBUG: 2023-09-27 20:00:08,773:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,773:      pdf_renderer.py:  470: printSegment: 261 -   zusätzlich die commandos, die elementären commandos des Betriebssystems zu modifizieren,
   DEBUG: 2023-09-27 20:00:08,774:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,775:      pdf_renderer.py:  470: printSegment: 262
   DEBUG: 2023-09-27 20:00:08,775:      pdf_renderer.py:  470: printSegment: -   weil es echt so zum Beispiel anzeigen der Größe von Dateien, von überhaupt laufen sind,
   DEBUG: 2023-09-27 20:00:08,776:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,777:      pdf_renderer.py:  470: printSegment: 263 -   Prozessen, ja, so
   DEBUG: 2023-09-27 20:00:08,777:      pdf_renderer.py:  470: printSegment: ein Programm wie Top oder so unter Linux oder eben so ein Ls, mit dem sie sich
   DEBUG: 2023-09-27 20:00:08,778:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,778:      pdf_renderer.py:  470: printSegment: 264 -   irgendwie die Dateien
   DEBUG: 2023-09-27 20:00:08,779:      pdf_renderer.py:  470: printSegment: ausgeben, vielleicht wird dann die infizierte Datei einfach gar nicht
   DEBUG: 2023-09-27 20:00:08,780:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,781:      pdf_renderer.py:  470: printSegment: 265 -   angezeigt oder eben mit falscher Größe
   DEBUG: 2023-09-27 20:00:08,781:      pdf_renderer.py:  470: printSegment: angezeigt oder ähnlich. Das sind halt so
   DEBUG: 2023-09-27 20:00:08,782:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,783:      pdf_renderer.py:  470: printSegment: 266 -   Zusatzfunktionalitäten, die man bei Schatzoffer vornehmen kann, die
   DEBUG: 2023-09-27 20:00:08,783:      pdf_renderer.py:  470: printSegment: ist dann einem Nutzer oder auch
   DEBUG: 2023-09-27 20:00:08,784:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,785:      pdf_renderer.py:  470: printSegment: 267 -   einer professionellen Antibierensoftware erschweren überhaupt zu erkennen,
   DEBUG: 2023-09-27 20:00:08,785:      pdf_renderer.py:  470: printSegment: dass hier seltsame Dinge
   DEBUG: 2023-09-27 20:00:08,786:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,787:      pdf_renderer.py:  470: printSegment: 268 -   auf dem Rechner passieren. Dann gibt es noch die Kategorie von Slow und
   DEBUG: 2023-09-27 20:00:08,788:      pdf_renderer.py:  470: printSegment: Fastenfektor Wieren,
   DEBUG: 2023-09-27 20:00:08,788:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,789:      pdf_renderer.py:  470: printSegment: 269 -   Fastenfektor bedeutet, dass der Virus so programmiert ist, dass er möglichst maximalen
   DEBUG: 2023-09-27 20:00:08,790:      pdf_renderer.py:  470: printSegment: Schaden
   DEBUG: 2023-09-27 20:00:08,791:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,791:      pdf_renderer.py:  470: printSegment: 270 -   in sehr, sehr kurzer Zeit anrichtet. Das macht man zum Beispiel bei Rensomware, ja, weil wir
   DEBUG: 2023-09-27 20:00:08,792:      pdf_renderer.py:  470: printSegment: wollen
   DEBUG: 2023-09-27 20:00:08,793:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,793:      pdf_renderer.py:  470: printSegment: 271 -   ja, wenn die Schatzoffer dann die ganze Festplatte verschüsselt, dass das möglich rasant geht aus
   DEBUG: 2023-09-27 20:00:08,794:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,795:      pdf_renderer.py:  470: printSegment: 272
   DEBUG: 2023-09-27 20:00:08,796:      pdf_renderer.py:  470: printSegment: -   sich das angreifers, bevor wir als Nutzer halt eine Gegenmaßnahme einleiten könnten, ja, möglicherweise.
   DEBUG: 2023-09-27 20:00:08,797:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,797:      pdf_renderer.py:  470: printSegment: 273 -  
   DEBUG: 2023-09-27 20:00:08,798:      pdf_renderer.py:  470: printSegment: Und bei Slow Infektor ist es halt gerade umgedreht, da geht es darum, dass man sehr, sehr bedäftig
   DEBUG: 2023-09-27 20:00:08,799:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,800:      pdf_renderer.py:  470: printSegment: 274 -   vorgeht,
   DEBUG: 2023-09-27 20:00:08,800:      pdf_renderer.py:  470: printSegment: beim infizieren des Systems und beim Ausbreiten der Schatfunksionalität einfach um dem
   DEBUG: 2023-09-27 20:00:08,801:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,802:      pdf_renderer.py:  470: printSegment: 275 -   Nutzer keinen
   DEBUG: 2023-09-27 20:00:08,803:      pdf_renderer.py:  470: printSegment: Hinweis darauf zu geben, dass da wirklich eine echte Schatzoffer drauf ist,
   DEBUG: 2023-09-27 20:00:08,804:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,804:      pdf_renderer.py:  470: printSegment: 276 -   möglicherweise würde die
   DEBUG: 2023-09-27 20:00:08,805:      pdf_renderer.py:  470: printSegment: Schatzoffer dann auch erst Monate später wirklich aktiv, ja,
   DEBUG: 2023-09-27 20:00:08,806:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,807:      pdf_renderer.py:  470: printSegment: 277 -   dass es eben ein anderer Ansatz an dem man
   DEBUG: 2023-09-27 20:00:08,807:      pdf_renderer.py:  470: printSegment: beim Design eines Virus denken könnte.
   DEBUG: 2023-09-27 20:00:08,808:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,809:      pdf_renderer.py:  470: printSegment: 278 -   Ja, eine ganz wichtige Kategorie sind auch noch diese Polymorphen
   DEBUG: 2023-09-27 20:00:08,810:      pdf_renderer.py:  470: printSegment: Wieren, das sind also Wieren,
   DEBUG: 2023-09-27 20:00:08,810:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,811:      pdf_renderer.py:  470: printSegment: 279 -   die sich permanent auch ändern, ja, moderne Wieren tun das ein, ich hört es
   DEBUG: 2023-09-27 20:00:08,812:      pdf_renderer.py:  470: printSegment: jetzt immer,
   DEBUG: 2023-09-27 20:00:08,813:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,813:      pdf_renderer.py:  470: printSegment: 280 -   dass sie sich auch regelmäßig replizieren und dann ihre Signature ändern, ja, also die meisten
   DEBUG: 2023-09-27 20:00:08,814:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,815:      pdf_renderer.py:  470: printSegment: 281 -   Wierenskenners basieren ja darauf, dass wir versuchen, den Virus anhand seiner Signature zu erkennen,
   DEBUG: 2023-09-27 20:00:08,816:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,816:      pdf_renderer.py:  470: printSegment: 282 -
   DEBUG: 2023-09-27 20:00:08,817:      pdf_renderer.py:  470: printSegment:   so wie man das vielleicht auch in der Medizin, weil wir durch so ein Virologen machen würde, wenn man
   DEBUG: 2023-09-27 20:00:08,818:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,819:      pdf_renderer.py:  470: printSegment: 283 -  
   DEBUG: 2023-09-27 20:00:08,819:      pdf_renderer.py:  470: printSegment: jetzt so ein Coronavirus versucht zu entdecken, ja, dann macht man das ja auch auf Basis einer gewissen
   DEBUG: 2023-09-27 20:00:08,820:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,821:      pdf_renderer.py:  470: printSegment: 284 -  
   DEBUG: 2023-09-27 20:00:08,821:      pdf_renderer.py:  470: printSegment: Signature, die man entdecken kann. Und da sie eben immer das Problem bei echten Wieren ja auch,
   DEBUG: 2023-09-27 20:00:08,822:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,823:      pdf_renderer.py:  470: printSegment: 285 -   dass die
   DEBUG: 2023-09-27 20:00:08,824:      pdf_renderer.py:  470: printSegment: sich permanent auch verändern, mutieren und das lässt sich eben auch abbilden in die
   DEBUG: 2023-09-27 20:00:08,825:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,825:      pdf_renderer.py:  470: printSegment: 286 -   Software wieren. Und
   DEBUG: 2023-09-27 20:00:08,826:      pdf_renderer.py:  470: printSegment: dazu hat man dann eben Modifikationsalgerhythmen, die man verwendet in dem
   DEBUG: 2023-09-27 20:00:08,827:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,828:      pdf_renderer.py:  470: printSegment: 287 -   Virus, wenn man
   DEBUG: 2023-09-27 20:00:08,829:      pdf_renderer.py:  470: printSegment: impogramiert und wenn man diese Modifikationsalgerhythmen auch noch geheim hält,
   DEBUG: 2023-09-27 20:00:08,829:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,830:      pdf_renderer.py:  470: printSegment: 288 -   also sie
   DEBUG: 2023-09-27 20:00:08,831:      pdf_renderer.py:  470: printSegment: möglicherweise eben verschlüsselt in dem Virus, dass dann nicht jeder rankommt, dann ist
   DEBUG: 2023-09-27 20:00:08,832:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,832:      pdf_renderer.py:  470: printSegment: 289 -   es eben für die
   DEBUG: 2023-09-27 20:00:08,833:      pdf_renderer.py:  470: printSegment: Leute, die in den Wienzgenner bauen, sehr schwer diese Polymorfentwieren zu entdecken.
   DEBUG: 2023-09-27 20:00:08,834:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,835:      pdf_renderer.py:  470: printSegment: 290 -   So was sind jetzt
   DEBUG: 2023-09-27 20:00:08,835:      pdf_renderer.py:  470: printSegment: die Würmer am Gegensatz zu wieren? Hier ist der wichtigste Unterschied, dass es sich
   DEBUG: 2023-09-27 20:00:08,836:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,837:      pdf_renderer.py:  470: printSegment: 291 -   hier um aktive
   DEBUG: 2023-09-27 20:00:08,837:      pdf_renderer.py:  470: printSegment: Programme handelt oder aktive Routine handelt. Ja, das bedeutet ein Wurm hat
   DEBUG: 2023-09-27 20:00:08,838:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,839:      pdf_renderer.py:  470: printSegment: 292 -   nicht dieses Problem, dass er
   DEBUG: 2023-09-27 20:00:08,840:      pdf_renderer.py:  470: printSegment: unbedingt erst mal ein ausführbarer Wirtprogramm finden muss,
   DEBUG: 2023-09-27 20:00:08,840:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,841:      pdf_renderer.py:  470: printSegment: 293 -   sondern es ist eigenständig, es ist
   DEBUG: 2023-09-27 20:00:08,842:      pdf_renderer.py:  470: printSegment: unabhängig von anderen Programmen und kann auf dem Rechner sich
   DEBUG: 2023-09-27 20:00:08,842:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,843:      pdf_renderer.py:  470: printSegment: 294 -   entsprechend dort bewegen und dann
   DEBUG: 2023-09-27 20:00:08,843:      pdf_renderer.py:  470: printSegment: seine Schadfunktionalität auf das System einwirken lassen.
   DEBUG: 2023-09-27 20:00:08,844:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,845:      pdf_renderer.py:  470: printSegment: 295 -   Er kann sich in aller Regel auch relativ gut
   DEBUG: 2023-09-27 20:00:08,846:      pdf_renderer.py:  470: printSegment: vermehren. Also, das ist meistens bei Würmern ein Ziel
   DEBUG: 2023-09-27 20:00:08,847:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,848:      pdf_renderer.py:  470: printSegment: 296 -   möglichst viele Rechner im Netzwerk befallen,
   DEBUG: 2023-09-27 20:00:08,848:      pdf_renderer.py:  470: printSegment: indem man irgendwelche Schwachstellen von anderen Rechnern,
   DEBUG: 2023-09-27 20:00:08,849:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,850:      pdf_renderer.py:  470: printSegment: 297 -   die mit dem schon befallenen Rechner
   DEBUG: 2023-09-27 20:00:08,851:      pdf_renderer.py:  470: printSegment: irgendwie im Kontakt stehen, dass man auf diese
   DEBUG: 2023-09-27 20:00:08,851:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,852:      pdf_renderer.py:  470: printSegment: 298 -   sich halt sozusagen auch noch versucht zu fokussieren und
   DEBUG: 2023-09-27 20:00:08,853:      pdf_renderer.py:  470: printSegment: dort den Wurm zu verbreiten.
   DEBUG: 2023-09-27 20:00:08,854:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,854:      pdf_renderer.py:  470: printSegment: 299 -   Gut, ja, noch zwei letzte vielleicht, Zweiwehr und Etware. Also Zweiwehr ist
   DEBUG: 2023-09-27 20:00:08,855:      pdf_renderer.py:  470: printSegment: im Wesentlichen,
   DEBUG: 2023-09-27 20:00:08,856:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,857:      pdf_renderer.py:  470: printSegment: 300 -   wie der Name schon sagt, eine Spionage Software, die versucht uns auszuspionieren,
   DEBUG: 2023-09-27 20:00:08,857:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,858:      pdf_renderer.py:  470: printSegment: 301 - 
   DEBUG: 2023-09-27 20:00:08,859:      pdf_renderer.py:  470: printSegment:  sammelt irgendwelche Informationen auf dem Rechner, auf dem wir sind und überträgt sie danach
   DEBUG: 2023-09-27 20:00:08,860:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,861:      pdf_renderer.py:  470: printSegment: 302 -   außen. Im
   DEBUG: 2023-09-27 20:00:08,861:      pdf_renderer.py:  470: printSegment: Grunde kann man sagen, ist der Bundesgrillager auch so eine Art Zweiwehr. Dann Etware,
   DEBUG: 2023-09-27 20:00:08,862:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,863:      pdf_renderer.py:  470: printSegment: 303 -   auch so ein
   DEBUG: 2023-09-27 20:00:08,864:      pdf_renderer.py:  470: printSegment: Kunstwort, so wie eben Malware, kommt von Advertising, also von Werbung,
   DEBUG: 2023-09-27 20:00:08,865:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,866:      pdf_renderer.py:  470: printSegment: 304 -   die in Software integriert ist
   DEBUG: 2023-09-27 20:00:08,868:      pdf_renderer.py:  470: printSegment: und da gibt es dann eben diese Pop-Up-Werbung oder die Umleitung eines
   DEBUG: 2023-09-27 20:00:08,869:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,869:      pdf_renderer.py:  470: printSegment: 305 -   Brausers auf einer kommerzielle
   DEBUG: 2023-09-27 20:00:08,870:      pdf_renderer.py:  470: printSegment: Webseite. Also Dinge, die gerade mit dem Wesentlichen auf
   DEBUG: 2023-09-27 20:00:08,871:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,872:      pdf_renderer.py:  470: printSegment: 306 -   unbekannten freien Seiten des
   DEBUG: 2023-09-27 20:00:08,873:      pdf_renderer.py:  470: printSegment: Internet-Serumsherven sicherlich dem einen oder anderen auch schon passiert sind,
   DEBUG: 2023-09-27 20:00:08,873:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,874:      pdf_renderer.py:  470: printSegment: 307 -   das wird im
   DEBUG: 2023-09-27 20:00:08,875:      pdf_renderer.py:  470: printSegment: Weizen-Sinhalt auch als Malware, also Schatzoffer, betraftet. Gut, dann gibt
   DEBUG: 2023-09-27 20:00:08,876:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2023-09-27 20:00:08,876:      pdf_renderer.py:  470: printSegment: s natürlich
   DEBUG: 2023-09-27 20:00:08,877:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,888:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame123827.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:08,906:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,907:      pdf_renderer.py:  470: printSegment: 308 -   das berühmte
   DEBUG: 2023-09-27 20:00:08,907:      pdf_renderer.py:  470: printSegment: Fishing, da sind eben vor allem Nutzer besonders gefährdet, die jetzt im Umgang
   DEBUG: 2023-09-27 20:00:08,908:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,909:      pdf_renderer.py:  470: printSegment: 309 -   mit Rechnern vielleicht
   DEBUG: 2023-09-27 20:00:08,910:      pdf_renderer.py:  470: printSegment: nicht so vertraut sind und dann so vorgegaute E-Mails, wie diese hier zum
   DEBUG: 2023-09-27 20:00:08,911:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,911:      pdf_renderer.py:  470: printSegment: 310 -   Beispiel, da ging es um die Apple
   DEBUG: 2023-09-27 20:00:08,912:      pdf_renderer.py:  470: printSegment: ID, wurde so getan, als ob da irgendwas nicht in Ordnung ist,
   DEBUG: 2023-09-27 20:00:08,913:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,914:      pdf_renderer.py:  470: printSegment: 311 -   man sollte was bestätigen, da muss man halt
   DEBUG: 2023-09-27 20:00:08,915:      pdf_renderer.py:  470: printSegment: hürdig schon mal aufpassen, dass man da nicht ausversehen,
   DEBUG: 2023-09-27 20:00:08,916:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,917:      pdf_renderer.py:  470: printSegment: 312 -   dann doch mal auf so ein Link klickt und ja, das
   DEBUG: 2023-09-27 20:00:08,918:      pdf_renderer.py:  470: printSegment: ist auch schon gut versierten Informatik
   DEBUG: 2023-09-27 20:00:08,919:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,920:      pdf_renderer.py:  470: printSegment: 313 -   an passiert, also dass niemand so richtig vorgefallen hat, man sollte
   DEBUG: 2023-09-27 20:00:08,921:      pdf_renderer.py:  470: printSegment: also bei Fishing-Weisch
   DEBUG: 2023-09-27 20:00:08,921:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,922:      pdf_renderer.py:  470: printSegment: 314 -   E-Mails immer sehr sehr akkultiv sein oder sehr wachsam sein. So, jetzt wollte ich
   DEBUG: 2023-09-27 20:00:08,923:      pdf_renderer.py:  470: printSegment: Ihnen ja gerne noch
   DEBUG: 2023-09-27 20:00:08,924:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,925:      pdf_renderer.py:  470: printSegment: 315 -   eine Malware vorstellen, die sozusagen als der klassiker schlechte Tinn der erste
   DEBUG: 2023-09-27 20:00:08,926:      pdf_renderer.py:  470: printSegment: Internet-Wohr,
   DEBUG: 2023-09-27 20:00:08,926:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,927:      pdf_renderer.py:  470: printSegment: 316 -   der überhaupt in der Geschichte der IT-Sicherheit dokumentiert wurde, gilt, dass der
   DEBUG: 2023-09-27 20:00:08,928:      pdf_renderer.py:  470: printSegment: sogenannte
   DEBUG: 2023-09-27 20:00:08,929:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,930:      pdf_renderer.py:  470: printSegment: 317 -   morges Wohr aus dem Jahre 1988. Das war zu einer Zeit, wo es jetzt noch kein sehr großes
   DEBUG: 2023-09-27 20:00:08,931:      pdf_renderer.py:  470: printSegment: Internet gab,
   DEBUG: 2023-09-27 20:00:08,932:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,933:      pdf_renderer.py:  470: printSegment: 318 -   das war noch alles in den Kindern schon und man hatte jetzt hier beispielsweise diesen Wohr
   DEBUG: 2023-09-27 20:00:08,933:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,934:      pdf_renderer.py:  470: printSegment: 319 -   auf einem Rechner gestartet, ja, um jetzt so ein bisschen chronologischer Reihenfolge dargestellt, um 17.1,
   DEBUG: 2023-09-27 20:00:08,935:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,936:      pdf_renderer.py:  470: printSegment: 320 -   zu den Elften, wurde dieser Wohr auf einem Rechner gestartet und immerhin hat er, obwohl es ja noch
   DEBUG: 2023-09-27 20:00:08,937:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,938:      pdf_renderer.py:  470: printSegment: 321 -  
   DEBUG: 2023-09-27 20:00:08,939:      pdf_renderer.py:  470: printSegment: nicht so viele Vernetzte Rechner zur damaligen Zeit gab, es geschafft bis 21 Uhr bereits 2500
   DEBUG: 2023-09-27 20:00:08,940:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,940:      pdf_renderer.py:  470: printSegment: 322 -   andere
   DEBUG: 2023-09-27 20:00:08,941:      pdf_renderer.py:  470: printSegment: Unix-Rechner in das Stanford-Universität zu befallen. Da wurde in mich dieser Internet-Wohr
   DEBUG: 2023-09-27 20:00:08,942:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,943:      pdf_renderer.py:  470: printSegment: 323 -   gestartet, dann
   DEBUG: 2023-09-27 20:00:08,944:      pdf_renderer.py:  470: printSegment: in einer halbe Stunde später war schon das ganze MIT infiziert, dann die University of
   DEBUG: 2023-09-27 20:00:08,944:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,945:      pdf_renderer.py:  470: printSegment: 324 -   Maryland, University
   DEBUG: 2023-09-27 20:00:08,946:      pdf_renderer.py:  470: printSegment: of California in Berkeley und so weiter und so fort, also es ging relativ
   DEBUG: 2023-09-27 20:00:08,947:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,948:      pdf_renderer.py:  470: printSegment: 325 -   rasch dann voran und es wurde halt
   DEBUG: 2023-09-27 20:00:08,949:      pdf_renderer.py:  470: printSegment: von den Atmenz auch wahrgenommen, dass diese Schalzoffersich hier
   DEBUG: 2023-09-27 20:00:08,950:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,950:      pdf_renderer.py:  470: printSegment: 326 -   offentlich recht explosionsartig
   DEBUG: 2023-09-27 20:00:08,951:      pdf_renderer.py:  470: printSegment: verbreitet, aber es hat doch eine ganze Weile gedauert, also bis zum
   DEBUG: 2023-09-27 20:00:08,952:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,953:      pdf_renderer.py:  470: printSegment: 327 -   nächsten Morgen, fast sechs Uhr, bis
   DEBUG: 2023-09-27 20:00:08,954:      pdf_renderer.py:  470: printSegment: man eine erste Idee hatte, wie man sich gegen diesen Internet-Wohr
   DEBUG: 2023-09-27 20:00:08,955:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,955:      pdf_renderer.py:  470: printSegment: 328 -   schützen kann. Da wurde dann
   DEBUG: 2023-09-27 20:00:08,956:      pdf_renderer.py:  470: printSegment: vorgeschlagen, dass man den Zielkompiler umbenennt auf den Rechnern,
   DEBUG: 2023-09-27 20:00:08,957:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,958:      pdf_renderer.py:  470: printSegment: 329 -   weil das war im Grunde ein Idee,
   DEBUG: 2023-09-27 20:00:08,959:      pdf_renderer.py:  470: printSegment: dass der Wohr, der sich denn immer ausgebreitet hat, seine
   DEBUG: 2023-09-27 20:00:08,960:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,961:      pdf_renderer.py:  470: printSegment: 330 -   eigenes Software nachgeladen hat und die musste
   DEBUG: 2023-09-27 20:00:08,962:      pdf_renderer.py:  470: printSegment: damit die für eines C-Kompilers übersetzt werden
   DEBUG: 2023-09-27 20:00:08,963:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,964:      pdf_renderer.py:  470: printSegment: 331 -   und allein durch das Umbeden des C-Kompilers auf den
   DEBUG: 2023-09-27 20:00:08,965:      pdf_renderer.py:  470: printSegment: Rechnern konnte man die Ausbreitung des Wohr
   DEBUG: 2023-09-27 20:00:08,966:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,967:      pdf_renderer.py:  470: printSegment: 332 -   ist hier in der Stelle schon mal ganz gut unterbinden. Ja gut,
   DEBUG: 2023-09-27 20:00:08,967:      pdf_renderer.py:  470: printSegment: also war schon recht erfolgreicher
   DEBUG: 2023-09-27 20:00:08,968:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,969:      pdf_renderer.py:  470: printSegment: 333 -   rum, damals, zu damaligen Zeit, wie gesagt, das Internet war noch nicht so
   DEBUG: 2023-09-27 20:00:08,970:      pdf_renderer.py:  470: printSegment: groß, waren 10% des
   DEBUG: 2023-09-27 20:00:08,971:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,972:      pdf_renderer.py:  470: printSegment: 334 -   Internets weltweit infiziert und damit im Grunde schon relativ große Effekt. So was
   DEBUG: 2023-09-27 20:00:08,972:      pdf_renderer.py:  470: printSegment: waren jetzt die
   DEBUG: 2023-09-27 20:00:08,973:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,974:      pdf_renderer.py:  470: printSegment: 335 -   Schwachstellen, die Wunderability, letztlich die hier Verwendung fanden, dazu muss man
   DEBUG: 2023-09-27 20:00:08,975:      pdf_renderer.py:  470: printSegment: sich ein
   DEBUG: 2023-09-27 20:00:08,975:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,976:      pdf_renderer.py:  470: printSegment: 336 -   bisschen mit Unix-Programm ausdenken, also es wurde ein Programm wie Cent-Mehl verwendet und
   DEBUG: 2023-09-27 20:00:08,977:      pdf_renderer.py:  470: printSegment: ein
   DEBUG: 2023-09-27 20:00:08,978:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,979:      pdf_renderer.py:  470: printSegment: 337 -   Programm Finger hat. Ich würde Sie natürlich jetzt gerne interaktiv fragen, ob Sie wissen, was das ist,
   DEBUG: 2023-09-27 20:00:08,980:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,980:      pdf_renderer.py:  470: printSegment: 338 -   Cent-Mehl ist ja vom Namen her schon relativ gut erkennbar, das dient halt einfach dem Senden von
   DEBUG: 2023-09-27 20:00:08,981:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,981:      pdf_renderer.py:  470: printSegment: 339 -  
   DEBUG: 2023-09-27 20:00:08,982:      pdf_renderer.py:  470: printSegment: E-Mails, das ist ein Low-Level-Programm, was Sie auf jedem Linux-Unix-System finden und das wird
   DEBUG: 2023-09-27 20:00:08,983:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,983:      pdf_renderer.py:  470: printSegment: 340 -   auch
   DEBUG: 2023-09-27 20:00:08,984:      pdf_renderer.py:  470: printSegment: heute noch eingesetzt, also selbst wenn Sie einen recht komplizierten Mehlklein verwenden,
   DEBUG: 2023-09-27 20:00:08,984:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,985:      pdf_renderer.py:  470: printSegment: 341 -   liegt irgendwo
   DEBUG: 2023-09-27 20:00:08,986:      pdf_renderer.py:  470: printSegment: ganz unten drunter dieses rudimentäre Cent-Mehl-Programm, mit dem man denn von Hand
   DEBUG: 2023-09-27 20:00:08,987:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,988:      pdf_renderer.py:  470: printSegment: 342 -   bei der
   DEBUG: 2023-09-27 20:00:08,988:      pdf_renderer.py:  470: printSegment: SMP-Protokoll beispielsweise irgendwelche E-Mails versenden kann. Ein Grundlagenverlisung wird
   DEBUG: 2023-09-27 20:00:08,989:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,990:      pdf_renderer.py:  470: printSegment: 343 -   das
   DEBUG: 2023-09-27 20:00:08,990:      pdf_renderer.py:  470: printSegment: häufig auch gerne so gemacht, dass Sie dann wirklich mal selbst diese Protokolle triggern
   DEBUG: 2023-09-27 20:00:08,991:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,991:      pdf_renderer.py:  470: printSegment: 344 -   und sich dann
   DEBUG: 2023-09-27 20:00:08,992:      pdf_renderer.py:  470: printSegment: selber überlegen, welche Kommand, das müssen dann abgesetzt werden, um meine E-Mail zu
   DEBUG: 2023-09-27 20:00:08,992:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,993:      pdf_renderer.py:  470: printSegment: 345 -   versenden und
   DEBUG: 2023-09-27 20:00:08,994:      pdf_renderer.py:  470: printSegment: dann können Sie selbst dieses Programm aufrufen Cent-Mehl und damit dann die Nachricht
   DEBUG: 2023-09-27 20:00:08,995:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,996:      pdf_renderer.py:  470: printSegment: 346 -   verschicken.
   DEBUG: 2023-09-27 20:00:08,997:      pdf_renderer.py:  470: printSegment: Finger hingegen ist ein anderes Programm, was bei den meisten Unix-Systems Linux-Klasteren
   DEBUG: 2023-09-27 20:00:08,997:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:08,998:      pdf_renderer.py:  470: printSegment: 347 -   heute tagel,
   DEBUG: 2023-09-27 20:00:08,999:      pdf_renderer.py:  470: printSegment: deaktiviert ist, es diente dazu, dass man nachschauen konnte, ob andere Nutzer gerade
   DEBUG: 2023-09-27 20:00:08,999:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,000:      pdf_renderer.py:  470: printSegment: 348 -   aktuell auch eingelogt
   DEBUG: 2023-09-27 20:00:09,000:      pdf_renderer.py:  470: printSegment: sind in den System. Ja, das habe ich dann zum Beispiel als ich studiert habe,
   DEBUG: 2023-09-27 20:00:09,001:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,001:      pdf_renderer.py:  470: printSegment: 349 -   da gab es ja auch ein
   DEBUG: 2023-09-27 20:00:09,002:      pdf_renderer.py:  470: printSegment: Unix-Klaster bei uns im Unix-Rechen-System in der Uni und wenn man nachschauen
   DEBUG: 2023-09-27 20:00:09,003:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,004:      pdf_renderer.py:  470: printSegment: 350 -   wollte, ob eben andere
   DEBUG: 2023-09-27 20:00:09,004:      pdf_renderer.py:  470: printSegment: Kommilitonen bereits schon auch am Rechnern, irgendwo anderen Rechnerraum sitzen,
   DEBUG: 2023-09-27 20:00:09,005:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,006:      pdf_renderer.py:  470: printSegment: 351 -   dann hat man immer
   DEBUG: 2023-09-27 20:00:09,006:      pdf_renderer.py:  470: printSegment: mit diesem Fingerkommando praktisch nachgucken können, ob die da waren, wann Sie es
   DEBUG: 2023-09-27 20:00:09,007:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,008:      pdf_renderer.py:  470: printSegment: 352 -   letzte Mal e-Mail
   DEBUG: 2023-09-27 20:00:09,008:      pdf_renderer.py:  470: printSegment: gelesen haben, solche Dinge. Also im Grunde ein kleines Überwachungsprogramm,
   DEBUG: 2023-09-27 20:00:09,009:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,009:      pdf_renderer.py:  470: printSegment: 353 -   aber mehr zur zivilen
   DEBUG: 2023-09-27 20:00:09,010:      pdf_renderer.py:  470: printSegment: Nutzung, also einfach um den Alltag ein bisschen schöner zu machen,
   DEBUG: 2023-09-27 20:00:09,011:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,012:      pdf_renderer.py:  470: printSegment: 354 -   ist wie gesagt, heute Tage aus der
   DEBUG: 2023-09-27 20:00:09,012:      pdf_renderer.py:  470: printSegment: Dagen-Schut-Grün nicht mehr so erlaubt und wird deshalb meistens deaktiviert.
   DEBUG: 2023-09-27 20:00:09,013:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,014:      pdf_renderer.py:  470: printSegment: 355 -   Ja, dann wurden Remote
   DEBUG: 2023-09-27 20:00:09,014:      pdf_renderer.py:  470: printSegment: Execution genutzt und sogenannte Erhost-Dateien. Das sind Techniken,
   DEBUG: 2023-09-27 20:00:09,015:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,016:      pdf_renderer.py:  470: printSegment: 356 -   die Linux anbietet oder Unix, um
   DEBUG: 2023-09-27 20:00:09,016:      pdf_renderer.py:  470: printSegment: sich auf einen anderen Rechner einzulocken.
   DEBUG: 2023-09-27 20:00:09,017:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,017:      pdf_renderer.py:  470: printSegment: 357 -   Also zum Beispiel habe ich zu damaligen Zeit halt an der TU
   DEBUG: 2023-09-27 20:00:09,018:      pdf_renderer.py:  470: printSegment: Berlin studiert und war noch zusätzlich
   DEBUG: 2023-09-27 20:00:09,019:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,020:      pdf_renderer.py:  470: printSegment: 358 -   Studentialhilskraft an einem Forschungsinstitut. Und dort hatte ich
   DEBUG: 2023-09-27 20:00:09,021:      pdf_renderer.py:  470: printSegment: natürlich ein anderes Rechnersystem,
   DEBUG: 2023-09-27 20:00:09,021:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,022:      pdf_renderer.py:  470: printSegment: 359 -   einem Rechner dort und es war jetzt die Möglichkeit gegeben und der
   DEBUG: 2023-09-27 20:00:09,023:      pdf_renderer.py:  470: printSegment: Unix sollte auch in der Regel
   DEBUG: 2023-09-27 20:00:09,023:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,024:      pdf_renderer.py:  470: printSegment: 360 -   aktiviert, dass man einfach vertrauenzüge die Rechner angeben konnte, um sich
   DEBUG: 2023-09-27 20:00:09,024:      pdf_renderer.py:  470: printSegment: von der
   DEBUG: 2023-09-27 20:00:09,025:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,025:      pdf_renderer.py:  470: printSegment: 361 -   Ferne Remote sozusagen auf den einzulocken. Und das hatte den Effekt, dass wenn man jetzt auf
   DEBUG: 2023-09-27 20:00:09,026:      pdf_renderer.py:  470: printSegment: dem
   DEBUG: 2023-09-27 20:00:09,027:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,027:      pdf_renderer.py:  470: printSegment: 362 -   Rechner zum Beispiel in dem Forschungsinstitut einfach angegeben hat, mein Account namen und den
   DEBUG: 2023-09-27 20:00:09,028:      pdf_renderer.py:  470: printSegment: Rechnernamen
   DEBUG: 2023-09-27 20:00:09,029:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,029:      pdf_renderer.py:  470: printSegment: 363 -   mit der entsprechenden Mekadresse und IP-Adresse von dem Uni-Netzwerk, dass ich dann
   DEBUG: 2023-09-27 20:00:09,030:      pdf_renderer.py:  470: printSegment: ohne ein
   DEBUG: 2023-09-27 20:00:09,030:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,031:      pdf_renderer.py:  470: printSegment: 364 -   Passwort einzugeben, auf diesen anderen Rechner mich einlocken konnte. Das war eben so eine
   DEBUG: 2023-09-27 20:00:09,032:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,032:      pdf_renderer.py:  470: printSegment: 365
   DEBUG: 2023-09-27 20:00:09,033:      pdf_renderer.py:  470: printSegment: -   Komfortfunktion einfach, um das lässt die geständige Neue eingeben von Passwordern zu unterminden.
   DEBUG: 2023-09-27 20:00:09,033:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,034:      pdf_renderer.py:  470: printSegment: 366 -  
   DEBUG: 2023-09-27 20:00:09,035:      pdf_renderer.py:  470: printSegment: Aber hat natürlich auch durchaus sicherheitskritische Aspekte, die jetzt hier dann eben von diesem
   DEBUG: 2023-09-27 20:00:09,036:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,036:      pdf_renderer.py:  470: printSegment: 367 -   Wohm
   DEBUG: 2023-09-27 20:00:09,037:      pdf_renderer.py:  470: printSegment: auch ausgenutzt wurden. Und die letzte Geschichte waren einfach sogenannte Password-Attacken,
   DEBUG: 2023-09-27 20:00:09,038:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,038:      pdf_renderer.py:  470: printSegment: 368 -   also dass
   DEBUG: 2023-09-27 20:00:09,039:      pdf_renderer.py:  470: printSegment: man versucht hat einfach schwache Passwörter zu erraten. Zu damaligen Zeiten 1988 war das
   DEBUG: 2023-09-27 20:00:09,040:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,041:      pdf_renderer.py:  470: printSegment: 369 -   natürlich auch
   DEBUG: 2023-09-27 20:00:09,041:      pdf_renderer.py:  470: printSegment: noch nicht so unbewusst sein durchgedrungen, dass man jetzt immer zufällig generierte,
   DEBUG: 2023-09-27 20:00:09,042:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,043:      pdf_renderer.py:  470: printSegment: 370 -   möglichst lange,
   DEBUG: 2023-09-27 20:00:09,044:      pdf_renderer.py:  470: printSegment: gratulgerache, starke Passwörter verwendet sollte und dadurch konnte man da eben
   DEBUG: 2023-09-27 20:00:09,044:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,045:      pdf_renderer.py:  470: printSegment: 371 -   relativ schnell auch mit
   DEBUG: 2023-09-27 20:00:09,046:      pdf_renderer.py:  470: printSegment: erfolgreich sein. Gut, die Schadfunksionalität erstmal, um
   DEBUG: 2023-09-27 20:00:09,046:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,047:      pdf_renderer.py:  470: printSegment: 372 -   diesem bisschen zu umreisen, es war kein
   DEBUG: 2023-09-27 20:00:09,047:      pdf_renderer.py:  470: printSegment: böswilliger Wohm, die Intention von dem der diesem Wohm
   DEBUG: 2023-09-27 20:00:09,048:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,048:      pdf_renderer.py:  470: printSegment: 373 -   geschrieben hat, war eigentlich mehr zu zeigen,
   DEBUG: 2023-09-27 20:00:09,049:      pdf_renderer.py:  470: printSegment: dass die Systeme unsicher sind und dass man
   DEBUG: 2023-09-27 20:00:09,049:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,050:      pdf_renderer.py:  470: printSegment: 374 -   mit der Unterausnutzung dieser Schwachstellen der Systeme
   DEBUG: 2023-09-27 20:00:09,051:      pdf_renderer.py:  470: printSegment: einen sehr, sehr schnellen Schaden anrichten
   DEBUG: 2023-09-27 20:00:09,052:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,053:      pdf_renderer.py:  470: printSegment: 375 -   kann, wenn man den möchte. Aber eigentlich wollte er keine
   DEBUG: 2023-09-27 20:00:09,054:      pdf_renderer.py:  470: printSegment: Dagen zerstören, derjenige, der diesen
   DEBUG: 2023-09-27 20:00:09,054:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,055:      pdf_renderer.py:  470: printSegment: 376 -   Wohm sich ausgedacht hat. Allerdings ist ja auch ein Entwickler von
   DEBUG: 2023-09-27 20:00:09,055:      pdf_renderer.py:  470: printSegment: Schadstoff, wer nicht
   DEBUG: 2023-09-27 20:00:09,056:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,056:      pdf_renderer.py:  470: printSegment: 377 -   davor gefeiert hat, dass auch Fehler macht und das ist ihm unterlaufen, hat ein
   DEBUG: 2023-09-27 20:00:09,057:      pdf_renderer.py:  470: printSegment: Designfehler
   DEBUG: 2023-09-27 20:00:09,057:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,058:      pdf_renderer.py:  470: printSegment: 378 -   begangen und dieser Designfehler, der war wie gesagt nicht beabsichtigt, hat denn dazu geführt,
   DEBUG: 2023-09-27 20:00:09,058:      pdf_renderer.py:  470: printSegment: 379 -   dass der Schutz hier verfügbarkeit auf den angerüffenden Rechnern ganz massiv eingeschränkt wurde.
   DEBUG: 2023-09-27 20:00:09,059:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,060:      pdf_renderer.py:  470: printSegment: 380 -  
   DEBUG: 2023-09-27 20:00:09,061:      pdf_renderer.py:  470: printSegment: Also viele Betriebsmittel der Rechner wurden aufgebraucht, sodass die dann für die normalen Nutzer nicht
   DEBUG: 2023-09-27 20:00:09,061:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,062:      pdf_renderer.py:  470: printSegment: 381 -  
   DEBUG: 2023-09-27 20:00:09,063:      pdf_renderer.py:  470: printSegment: mehr richtig verwendbar waren und dadurch hat er dann doch ein ziemlich großen Schaden angerichtet,
   DEBUG: 2023-09-27 20:00:09,063:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,064:      pdf_renderer.py:  470: printSegment: 382 -   aber
   DEBUG: 2023-09-27 20:00:09,065:      pdf_renderer.py:  470: printSegment: das war wie gesagt eigentlich nicht intensiert, sondern war mehr durch das falsche Programmieren des
   DEBUG: 2023-09-27 20:00:09,065:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,066:      pdf_renderer.py:  470: printSegment: 383 -  
   DEBUG: 2023-09-27 20:00:09,066:      pdf_renderer.py:  470: printSegment: Wohms entstandeln. So was hat der Designer des Morseworms sich so überlegt, um zum Beispiel auch
   DEBUG: 2023-09-27 20:00:09,067:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,068:      pdf_renderer.py:  470: printSegment: 384 -   so
   DEBUG: 2023-09-27 20:00:09,069:      pdf_renderer.py:  470: printSegment: Teuschungsmaßnahmen vorzunehmen, damit man den Wohm nicht zu schnell entdeckt? Eine Maßnahme war,
   DEBUG: 2023-09-27 20:00:09,070:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,071:      pdf_renderer.py:  470: printSegment: 385 - 
   DEBUG: 2023-09-27 20:00:09,071:      pdf_renderer.py:  470: printSegment:  dass er sein Prozess in S.H. umbenannt hat. Der hieß jetzt also nicht irgendwie, ich bin ein Wohm oder so,
   DEBUG: 2023-09-27 20:00:09,072:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,072:      pdf_renderer.py:  470: printSegment: 386 -  
   DEBUG: 2023-09-27 20:00:09,073:      pdf_renderer.py:  470: printSegment: sondern er hat ihn einfach S.H. genannt. Warum will S.H. würde ich jetzt interaktiv fragen,
   DEBUG: 2023-09-27 20:00:09,074:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,074:      pdf_renderer.py:  470: printSegment: 387 -   die Leute, die
   DEBUG: 2023-09-27 20:00:09,075:      pdf_renderer.py:  470: printSegment: sich ein bisschen mit Juni auskennen und Linux wissen, dass es von S.H.
   DEBUG: 2023-09-27 20:00:09,075:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,076:      pdf_renderer.py:  470: printSegment: 388 -   was ja eine Schell ist, sehr viele
   DEBUG: 2023-09-27 20:00:09,077:      pdf_renderer.py:  470: printSegment: Prozesse, normalerweise auf dem Rechner existieren und damit
   DEBUG: 2023-09-27 20:00:09,077:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,078:      pdf_renderer.py:  470: printSegment: 389 -   fällt so ein Prozess, der eigentlich was böses
   DEBUG: 2023-09-27 20:00:09,078:      pdf_renderer.py:  470: printSegment: tut, gar nicht auf. Er ist dann unter vielen,
   DEBUG: 2023-09-27 20:00:09,079:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,080:      pdf_renderer.py:  470: printSegment: 390 -   die ganz genauer heißen wie er selbst und insbesondere ist es ja
   DEBUG: 2023-09-27 20:00:09,080:      pdf_renderer.py:  470: printSegment: auch so, wenn sie sich anzeigen,
   DEBUG: 2023-09-27 20:00:09,081:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,081:      pdf_renderer.py:  470: printSegment: 391 -   lassen, welche Prozesse im Grad aktiv können Sie auch sehen, welche
   DEBUG: 2023-09-27 20:00:09,082:      pdf_renderer.py:  470: printSegment: gerade viele Betriebsmittel
   DEBUG: 2023-09-27 20:00:09,082:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,083:      pdf_renderer.py:  470: printSegment: 392 -   aufbrauchen und da wundert man sich dann auch weniger, wenn so einen
   DEBUG: 2023-09-27 20:00:09,084:      pdf_renderer.py:  470: printSegment: Schellprozess gerade irgendwie
   DEBUG: 2023-09-27 20:00:09,085:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,085:      pdf_renderer.py:  470: printSegment: 393 -   was zu tun hat, als wie wenn es irgendein anderer exotischer Name ist und
   DEBUG: 2023-09-27 20:00:09,086:      pdf_renderer.py:  470: printSegment: der da gerade irgendwie 30,
   DEBUG: 2023-09-27 20:00:09,087:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,087:      pdf_renderer.py:  470: printSegment: 394 -   40, 50 Prozent des Prozessers der Prozesser Rechmeleistung bekommt. Ja, der
   DEBUG: 2023-09-27 20:00:09,088:      pdf_renderer.py:  470: printSegment: Prozess hatte dann noch
   DEBUG: 2023-09-27 20:00:09,089:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,089:      pdf_renderer.py:  470: printSegment: 395 -   die weitere Maßnahme, dass er nach einer gewissen Zeit die Kontrolle an ein
   DEBUG: 2023-09-27 20:00:09,090:      pdf_renderer.py:  470: printSegment: Tochterprozess
   DEBUG: 2023-09-27 20:00:09,090:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,091:      pdf_renderer.py:  470: printSegment: 396 -   abgegeben hat und selbst terminierte. Warum das? Weil er einfach auch um an der Stelle
   DEBUG: 2023-09-27 20:00:09,092:      pdf_renderer.py:  470: printSegment: nicht
   DEBUG: 2023-09-27 20:00:09,093:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,093:      pdf_renderer.py:  470: printSegment: 397 -   zu auffällig zu sein, wenn nämlich ein Prozess sehr alt ist und schon seit fünf Tagen läuft oder so,
   DEBUG: 2023-09-27 20:00:09,094:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,095:      pdf_renderer.py:  470: printSegment: 398 - 
   DEBUG: 2023-09-27 20:00:09,095:      pdf_renderer.py:  470: printSegment:  dann ist es für den Atmen auch mal ein Beleg, dass hier irgendwas komisch läuft und wenn man sich aber
   DEBUG: 2023-09-27 20:00:09,096:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,096:      pdf_renderer.py:  470: printSegment: 399 -  
   DEBUG: 2023-09-27 20:00:09,097:      pdf_renderer.py:  470: printSegment: regelmäßig immer wieder verjüngt, dann fällt das eben halt nicht so leicht auf. Das war halt auch ein
   DEBUG: 2023-09-27 20:00:09,097:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,098:      pdf_renderer.py:  470: printSegment: 400 -   Idee um
   DEBUG: 2023-09-27 20:00:09,098:      pdf_renderer.py:  470: printSegment: die anderen zu täuschen. Ja, Test vor Neuinfektionen, die Idee war hier, dass man einfach
   DEBUG: 2023-09-27 20:00:09,099:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,100:      pdf_renderer.py:  470: printSegment: 401 -   nicht zu schnell
   DEBUG: 2023-09-27 20:00:09,100:      pdf_renderer.py:  470: printSegment: andere Rechner infiziert. Das heißt, Sie müssen sich vorstellen, wenn man 15
   DEBUG: 2023-09-27 20:00:09,101:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,102:      pdf_renderer.py:  470: printSegment: 402 -   andere Potenziale Systeme
   DEBUG: 2023-09-27 20:00:09,102:      pdf_renderer.py:  470: printSegment: gefunden hat, die man eventuell infizieren hätte können, dass man
   DEBUG: 2023-09-27 20:00:09,103:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,104:      pdf_renderer.py:  470: printSegment: 403 -   dann gesagt hat von den 15, welche nur
   DEBUG: 2023-09-27 20:00:09,104:      pdf_renderer.py:  470: printSegment: einen weiteren infizieren. Und darüber sollte man quasi
   DEBUG: 2023-09-27 20:00:09,105:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,106:      pdf_renderer.py:  470: printSegment: 404 -   so ähnlich wie bei diesem Slow-Infaction-Wiren
   DEBUG: 2023-09-27 20:00:09,107:      pdf_renderer.py:  470: printSegment: erreichen, dass der Wurm nicht so schnell auffällt.
   DEBUG: 2023-09-27 20:00:09,107:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,108:      pdf_renderer.py:  470: printSegment: 405 -   Ja, dadurch, dass er sich relativ langsam vorarbeitet
   DEBUG: 2023-09-27 20:00:09,109:      pdf_renderer.py:  470: printSegment: würde, er eben dann nicht so schnell auffallen
   DEBUG: 2023-09-27 20:00:09,110:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,110:      pdf_renderer.py:  470: printSegment: 406 -   und möglicherweise dann auch nicht so schnell gegen
   DEBUG: 2023-09-27 20:00:09,111:      pdf_renderer.py:  470: printSegment: Maßnahmen gegen ihn ergriffen werden.
   DEBUG: 2023-09-27 20:00:09,111:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,112:      pdf_renderer.py:  470: printSegment: 407 -   Nur war es aber so, dass man hier eben ein Programmierfehler
   DEBUG: 2023-09-27 20:00:09,112:      pdf_renderer.py:  470: printSegment: gemacht hat und anstelle, dass einer von 15
   DEBUG: 2023-09-27 20:00:09,113:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,114:      pdf_renderer.py:  470: printSegment: 408 -   infiziert wurde, wurden bei diesem Mores Wurm 14 von 15
   DEBUG: 2023-09-27 20:00:09,114:      pdf_renderer.py:  470: printSegment: infiziert und das hat dann eben unbeabsichtig
   DEBUG: 2023-09-27 20:00:09,115:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,116:      pdf_renderer.py:  470: printSegment: 409 -   dazu geführt, dass es in einer Art Denai of Service Attack war.
   DEBUG: 2023-09-27 20:00:09,116:      pdf_renderer.py:  470: printSegment: Also, das heißt, die Betriebsmittel
   DEBUG: 2023-09-27 20:00:09,117:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,118:      pdf_renderer.py:  470: printSegment: 410 -   der Rechner wurden ganz, ganz schnell aufgebraucht und damit das
   DEBUG: 2023-09-27 20:00:09,118:      pdf_renderer.py:  470: printSegment: schutzige Verfügbarkeit eben ganz massiv
   DEBUG: 2023-09-27 20:00:09,119:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,119:      pdf_renderer.py:  470: printSegment: 411 -   angegriffen. Jetzt so diesen Sicherheitslücken, die der Mores
   DEBUG: 2023-09-27 20:00:09,120:      pdf_renderer.py:  470: printSegment: Wurm ausgenutzt hat. Also bei diesem
   DEBUG: 2023-09-27 20:00:09,121:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,121:      pdf_renderer.py:  470: printSegment: 412 -   Fingercomando ging es um eine System- und Routine-GET. Ja, das ist
   DEBUG: 2023-09-27 20:00:09,122:      pdf_renderer.py:  470: printSegment: eine Funktion von C, die wir auch
   DEBUG: 2023-09-27 20:00:09,122:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,123:      pdf_renderer.py:  470: printSegment: 413 -   noch später beim Buffer-Over-Floosel beim Nutzen werden, um Angriffe
   DEBUG: 2023-09-27 20:00:09,124:      pdf_renderer.py:  470: printSegment: auf ein Programm durchzuführen.
   DEBUG: 2023-09-27 20:00:09,125:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,126:      pdf_renderer.py:  470: printSegment: 414 -   Und bei GET ist halt bekannt, dass wenn man darüber eine Eingabe als
   DEBUG: 2023-09-27 20:00:09,126:      pdf_renderer.py:  470: printSegment: Nutzer tätigt, dass die Eingabe nicht
   DEBUG: 2023-09-27 20:00:09,127:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,128:      pdf_renderer.py:  470: printSegment: 415 -   validiert wird. Also es wird nicht geprüft, wie lang es die Eingabe ist
   DEBUG: 2023-09-27 20:00:09,128:      pdf_renderer.py:  470: printSegment: und darüber kann man halt
   DEBUG: 2023-09-27 20:00:09,129:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,129:      pdf_renderer.py:  470: printSegment: 416 -   dann Teile des Speichers überschreiben und im unter anderem halt auch die
   DEBUG: 2023-09-27 20:00:09,130:      pdf_renderer.py:  470: printSegment: Rücksprung-Adresse des
   DEBUG: 2023-09-27 20:00:09,130:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,131:      pdf_renderer.py:  470: printSegment: 417 -   Programms überschreiben und in dem Fall war es sogar möglich, darüber eine
   DEBUG: 2023-09-27 20:00:09,132:      pdf_renderer.py:  470: printSegment: Schell zu starten,
   DEBUG: 2023-09-27 20:00:09,132:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,133:      pdf_renderer.py:  470: printSegment: 418 -   was dann für einen Angreiferschnitt immer ein sehr großer Erfolg ist, wenn es ihm gelingt,
   DEBUG: 2023-09-27 20:00:09,134:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,134:      pdf_renderer.py:  470: printSegment: 419 -   einer Eingeschell durch so einen Angriff zu starten. Gut, ja, Cent-Mehl war von daher eigentlich gar
   DEBUG: 2023-09-27 20:00:09,135:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,136:      pdf_renderer.py:  470: printSegment: 420 -  
   DEBUG: 2023-09-27 20:00:09,136:      pdf_renderer.py:  470: printSegment: nicht so ein richtiger Back, sondern es könnte man sagen, vielleicht eher ein Feature. Und zwar
   DEBUG: 2023-09-27 20:00:09,137:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,138:      pdf_renderer.py:  470: printSegment: 421 -   hatten die
   DEBUG: 2023-09-27 20:00:09,138:      pdf_renderer.py:  470: printSegment: Atmins das Cent-Mehlprogramm so umkonfiguriert oder genutzt, dass man ist in so einer Art,
   DEBUG: 2023-09-27 20:00:09,139:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,140:      pdf_renderer.py:  470: printSegment: 422 -   die
   DEBUG: 2023-09-27 20:00:09,140:      pdf_renderer.py:  470: printSegment: Backmodus laufen lassen konnte. Und dann dem Mehl, sozusagen, Nachricht geschicken konnte,
   DEBUG: 2023-09-27 20:00:09,141:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,142:      pdf_renderer.py:  470: printSegment: 423 -   die dann
   DEBUG: 2023-09-27 20:00:09,142:      pdf_renderer.py:  470: printSegment: von irgendwelchen Programm auf den Rechner verarbeitet wurden und dazu geführt haben,
   DEBUG: 2023-09-27 20:00:09,143:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,143:      pdf_renderer.py:  470: printSegment: 424 -   dass man so von
   DEBUG: 2023-09-27 20:00:09,144:      pdf_renderer.py:  470: printSegment: außen Remote den Rechner steuern konnte. Auch da war es jetzt möglich über diese
   DEBUG: 2023-09-27 20:00:09,144:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,145:      pdf_renderer.py:  470: printSegment: 425 -   Zusatzfunktionalität
   DEBUG: 2023-09-27 20:00:09,146:      pdf_renderer.py:  470: printSegment: vom Cent-Mehl sogar Schelz mit Rudrechten zu starten. Also und so
   DEBUG: 2023-09-27 20:00:09,147:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,147:      pdf_renderer.py:  470: printSegment: 426 -   fern noch schlimmer als hier, da war
   DEBUG: 2023-09-27 20:00:09,148:      pdf_renderer.py:  470: printSegment: gelang es einfach nur eine normale Schell zu starten, hier dann
   DEBUG: 2023-09-27 20:00:09,149:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,150:      pdf_renderer.py:  470: printSegment: 427 -   eben sogar Schelz mit Rudrechten. Und das
   DEBUG: 2023-09-27 20:00:09,150:      pdf_renderer.py:  470: printSegment: ist natürlich dann auch für die Fortflanzung eines
   DEBUG: 2023-09-27 20:00:09,151:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,151:      pdf_renderer.py:  470: printSegment: 428 -   Wohms ideal, wenn man so eine Schwachstelle findet. Gut,
   DEBUG: 2023-09-27 20:00:09,152:      pdf_renderer.py:  470: printSegment: jetzt schauen wir uns mal so ein bisschen den
   DEBUG: 2023-09-27 20:00:09,153:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,161:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame175971.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:09,170:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,171:      pdf_renderer.py:  470: printSegment: 429 -   Überblick an, wie der Wohm programmiert wurde. Stellen sich
   DEBUG: 2023-09-27 20:00:09,171:      pdf_renderer.py:  470: printSegment: vor, wie Sie haben hier schon ein infiziertes
   DEBUG: 2023-09-27 20:00:09,172:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,173:      pdf_renderer.py:  470: printSegment: 430 -   System, irgendwo muss man ja mal anfangen, gestartet wurde
   DEBUG: 2023-09-27 20:00:09,173:      pdf_renderer.py:  470: printSegment: der Wohm ja auch auf einem Rechner,
   DEBUG: 2023-09-27 20:00:09,174:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,175:      pdf_renderer.py:  470: printSegment: 431 -   der eben im Netzwerk war, bewusst. Und dann versucht man von
   DEBUG: 2023-09-27 20:00:09,175:      pdf_renderer.py:  470: printSegment: diesem infizierten System auf ein
   DEBUG: 2023-09-27 20:00:09,176:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,176:      pdf_renderer.py:  470: printSegment: 432 -   anderes neues Zielsystem zu kommen. Da hatte man jetzt eben mehrere
   DEBUG: 2023-09-27 20:00:09,177:      pdf_renderer.py:  470: printSegment: Möglichkeiten. Die erste war,
   DEBUG: 2023-09-27 20:00:09,177:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,178:      pdf_renderer.py:  470: printSegment: 433 -   dass man es über so eine Remote Lock-In-Mechanismus versucht hat, das was
   DEBUG: 2023-09-27 20:00:09,178:      pdf_renderer.py:  470: printSegment: Sie in der Ziert hatte,
   DEBUG: 2023-09-27 20:00:09,179:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,179:      pdf_renderer.py:  470: printSegment: 434 -   wenn man ja auf dem Zielsystem irgendwelche vertrauenswürdigen Hosteinträg, die
   DEBUG: 2023-09-27 20:00:09,180:      pdf_renderer.py:  470: printSegment: sagen, ja,
   DEBUG: 2023-09-27 20:00:09,181:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,182:      pdf_renderer.py:  470: printSegment: 435 -   wenn ein Nutzer von diesem Rechner da kommt, dann darf er sich hier auch ohne Passwort
   DEBUG: 2023-09-27 20:00:09,183:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,183:      pdf_renderer.py:  470: printSegment: 436 -  
   DEBUG: 2023-09-27 20:00:09,184:      pdf_renderer.py:  470: printSegment: eingabe in dem Zielsystem einlocken. Dann eben dieser Versuch über Cent-Mehl, wo man eben eine
   DEBUG: 2023-09-27 20:00:09,185:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,186:      pdf_renderer.py:  470: printSegment: 437 -   Schelle
   DEBUG: 2023-09-27 20:00:09,186:      pdf_renderer.py:  470: printSegment: mit Rudrechten auf dem Zielsystem starten konnte durch diesen debugenden Modus, dann fingert,
   DEBUG: 2023-09-27 20:00:09,187:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,187:      pdf_renderer.py:  470: printSegment: 438 -   sozusagen
   DEBUG: 2023-09-27 20:00:09,188:      pdf_renderer.py:  470: printSegment: dieses unsichere Gelt, was da benutzt wurde in dem Programm und darüber versuchen,
   DEBUG: 2023-09-27 20:00:09,189:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,190:      pdf_renderer.py:  470: printSegment: 439 -   eine Schelle zu
   DEBUG: 2023-09-27 20:00:09,190:      pdf_renderer.py:  470: printSegment: starten und dann noch als letzte Variante eine Passwort angriff, also dass man
   DEBUG: 2023-09-27 20:00:09,191:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,192:      pdf_renderer.py:  470: printSegment: 440 -   einfach ein kleines Wörterbuch
   DEBUG: 2023-09-27 20:00:09,192:      pdf_renderer.py:  470: printSegment: durchgegangen mit unterschiedlichen Schwachen Passwörtern und hat
   DEBUG: 2023-09-27 20:00:09,193:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,193:      pdf_renderer.py:  470: printSegment: 441 -   die versucht alle am Zielsystem
   DEBUG: 2023-09-27 20:00:09,194:      pdf_renderer.py:  470: printSegment: auszuprobieren, ob man darüber vielleicht in das System eindringen kann.
   DEBUG: 2023-09-27 20:00:09,194:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,195:      pdf_renderer.py:  470: printSegment: 442 -   Man hat natürlich immer dann nur
   DEBUG: 2023-09-27 20:00:09,195:      pdf_renderer.py:  470: printSegment: eine Art gebraucht, um auf System zu kommen, aber man hat eben
   DEBUG: 2023-09-27 20:00:09,196:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,197:      pdf_renderer.py:  470: printSegment: 443 -   alle vier Alternativen durch den Wurm
   DEBUG: 2023-09-27 20:00:09,198:      pdf_renderer.py:  470: printSegment: immer durchprobieren lassen. So, wenn das gelungen war,
   DEBUG: 2023-09-27 20:00:09,198:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,199:      pdf_renderer.py:  470: printSegment: 444 -   wenn man mit einer dieser Techniken erfolgreich
   DEBUG: 2023-09-27 20:00:09,199:      pdf_renderer.py:  470: printSegment: war, dann hat man einen so genannten Interhaken
   DEBUG: 2023-09-27 20:00:09,200:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,201:      pdf_renderer.py:  470: printSegment: 445 -   erst mal im Zielsystem etabliert und das war ein ganz ganz
   DEBUG: 2023-09-27 20:00:09,201:      pdf_renderer.py:  470: printSegment: kleines Stückchen Kot nur,
   DEBUG: 2023-09-27 20:00:09,202:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,203:      pdf_renderer.py:  470: printSegment: 446 -   dass dazu da war, den eigentlichen Kot des Wormes nachzuladen. Und dieses
   DEBUG: 2023-09-27 20:00:09,203:      pdf_renderer.py:  470: printSegment: Nachladen,
   DEBUG: 2023-09-27 20:00:09,204:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,205:      pdf_renderer.py:  470: printSegment: 447 -   das etwas größeren Kotfragments, das erfolbte dann in dem 6. Schritt und wurde auf dem
   DEBUG: 2023-09-27 20:00:09,205:      pdf_renderer.py:  470: printSegment: Zielsystem
   DEBUG: 2023-09-27 20:00:09,206:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,207:      pdf_renderer.py:  470: printSegment: 448 -   dann mit Hilfe eines Zielkompayers übersetzt. Und dadurch war dann eben halt auch die am
   DEBUG: 2023-09-27 20:00:09,207:      pdf_renderer.py:  470: printSegment: nächsten
   DEBUG: 2023-09-27 20:00:09,208:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,208:      pdf_renderer.py:  470: printSegment: 449 -   Tag gegen sechs Uhr entwickelte Gegenmaßnahme mit dem Unbe nennen, das Zielkompay lasst
   DEBUG: 2023-09-27 20:00:09,209:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,209:      pdf_renderer.py:  470: printSegment: 450 -   so erfolgreich, weil man beim Übersetzen des Programmes hier eben keine intelligente
   DEBUG: 2023-09-27 20:00:09,210:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,210:      pdf_renderer.py:  470: printSegment: 451 -   Entreden
   DEBUG: 2023-09-27 20:00:09,211:      pdf_renderer.py:  470: printSegment: Methoden eingesetzt hat, bei dem Morus Wurm, sondern man war einfach darauf angewiesen,
   DEBUG: 2023-09-27 20:00:09,212:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,212:      pdf_renderer.py:  470: printSegment: 452 -   dass das Ding
   DEBUG: 2023-09-27 20:00:09,213:      pdf_renderer.py:  470: printSegment: dann wirklich GCC oder je nachdem, bis damals hieß, heißt und dann hat man damit
   DEBUG: 2023-09-27 20:00:09,214:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,223:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame185746.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:09,235:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,235:      pdf_renderer.py:  470: printSegment: 453 -   den Wurm übersetzen
   DEBUG: 2023-09-27 20:00:09,236:      pdf_renderer.py:  470: printSegment: können. So, wer war denn jetzt eigentlich der Verursache des Morus Worms?
   DEBUG: 2023-09-27 20:00:09,237:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,237:      pdf_renderer.py:  470: printSegment: 454 -   Ja, also er heißt Morus Wurm,
   DEBUG: 2023-09-27 20:00:09,238:      pdf_renderer.py:  470: printSegment: weil ein hermores Ihren entwickelt hat. Es war damals ein 23-jahrealter
   DEBUG: 2023-09-27 20:00:09,239:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,239:      pdf_renderer.py:  470: printSegment: 455 -   Informatik-Student, der an dieser
   DEBUG: 2023-09-27 20:00:09,240:      pdf_renderer.py:  470: printSegment: Konnell-Universität gearbeitet hat. Er war im Übrigen ein so
   DEBUG: 2023-09-27 20:00:09,241:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,241:      pdf_renderer.py:  470: printSegment: 456 -  endes NSA-Tief-Zentist, also eine recht
   DEBUG: 2023-09-27 20:00:09,242:      pdf_renderer.py:  470: printSegment: berühmten Wissenschaftler bei der NSA. Und er wurde natürlich
   DEBUG: 2023-09-27 20:00:09,242:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,243:      pdf_renderer.py:  470: printSegment: 457 -   sehr bestraft dafür, insbesondere, dass es
   DEBUG: 2023-09-27 20:00:09,243:      pdf_renderer.py:  470: printSegment: jetzt nicht nur das Seigen, es geht, sondern er hat ja im
   DEBUG: 2023-09-27 20:00:09,244:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,244:      pdf_renderer.py:  470: printSegment: 458 -   Grunde auch das Internet damals sehr beeinträchtigt,
   DEBUG: 2023-09-27 20:00:09,245:      pdf_renderer.py:  470: printSegment: dadurch, dass er eben die Verfügbarkeit sehr stark
   DEBUG: 2023-09-27 20:00:09,246:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,247:      pdf_renderer.py:  470: printSegment: 459 -   angegriffen hat. Er musste ihm gelder zahlen und dann 400
   DEBUG: 2023-09-27 20:00:09,247:      pdf_renderer.py:  470: printSegment: Stunden Sozialdienst, aber am Nachhineim
   DEBUG: 2023-09-27 20:00:09,248:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,248:      pdf_renderer.py:  470: printSegment: 460 -   muss man sagen, er ist sehr berühmter mitgefordern und er ist
   DEBUG: 2023-09-27 20:00:09,249:      pdf_renderer.py:  470: printSegment: eben heutzutage Prof. An der Konnell-Universität
   DEBUG: 2023-09-27 20:00:09,249:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,250:      pdf_renderer.py:  470: printSegment: 461 -   und dann doch noch eine Auffeusgeschichte für ihn. Ja,
   DEBUG: 2023-09-27 20:00:09,250:      pdf_renderer.py:  470: printSegment: man hat natürlich auch viel gelernt aus
   DEBUG: 2023-09-27 20:00:09,251:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,251:      pdf_renderer.py:  470: printSegment: 462 -   diesem ersten Internet Worm, hat das sehr genau alle analysiert, was
   DEBUG: 2023-09-27 20:00:09,252:      pdf_renderer.py:  470: printSegment: da eigentlich passiert ist. Und
   DEBUG: 2023-09-27 20:00:09,253:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,253:      pdf_renderer.py:  470: printSegment: 463 -   hier sind halt so ein paar Sachen aufgelistet, was man gelernt hat. Also ein
   DEBUG: 2023-09-27 20:00:09,254:      pdf_renderer.py:  470: printSegment: ganz ganz wichtiger Punkt
   DEBUG: 2023-09-27 20:00:09,255:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,255:      pdf_renderer.py:  470: printSegment: 464 -   ist natürlich immer, dass man zeitnah auch bekannte Schwachstellen versucht zu
   DEBUG: 2023-09-27 20:00:09,256:      pdf_renderer.py:  470: printSegment: beseitigen, dass man
   DEBUG: 2023-09-27 20:00:09,256:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,257:      pdf_renderer.py:  470: printSegment: 465 -   wirklich versucht, starker Passbörter zu verwenden, dass man das Prinzip prinzipiell auf
   DEBUG: 2023-09-27 20:00:09,258:      pdf_renderer.py:  470: printSegment: 466 -   LIST-Privileg verwendet, das bedeutet, man sollte dem Programm, die auf einem Rechner laufen,
   DEBUG: 2023-09-27 20:00:09,258:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,259:      pdf_renderer.py:  470: printSegment: 467 -   man
   DEBUG: 2023-09-27 20:00:09,260:      pdf_renderer.py:  470: printSegment: nur die Privilegien geben, also die Rechte geben, die sie für ihre Ausführung auch wirklich
   DEBUG: 2023-09-27 20:00:09,260:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,261:      pdf_renderer.py:  470: printSegment: 468 -   benötigen. Also
   DEBUG: 2023-09-27 20:00:09,261:      pdf_renderer.py:  470: printSegment: das ein Zenten mehr Programm, dazu nahe Lage ist, irgendeine Rutschelle auf dem
   DEBUG: 2023-09-27 20:00:09,262:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,263:      pdf_renderer.py:  470: printSegment: 469 -   Rechner zu gestarten, das
   DEBUG: 2023-09-27 20:00:09,263:      pdf_renderer.py:  470: printSegment: gehört halt nicht zur Kernfunktionalität eines Zentem mehr Programm,
   DEBUG: 2023-09-27 20:00:09,264:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,264:      pdf_renderer.py:  470: printSegment: 470 -   sondern deshalb sollte man sowas
   DEBUG: 2023-09-27 20:00:09,265:      pdf_renderer.py:  470: printSegment: eben auf jeden Fall vermeiden. Ja, wichtig sind auch solche
   DEBUG: 2023-09-27 20:00:09,265:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,266:      pdf_renderer.py:  470: printSegment: 471 -   Organisationen, wie das zert, die im Grunde alle
   DEBUG: 2023-09-27 20:00:09,267:      pdf_renderer.py:  470: printSegment: Angriffe, die aktuell passieren in der Welt sammeln
   DEBUG: 2023-09-27 20:00:09,267:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,268:      pdf_renderer.py:  470: printSegment: 472 -   und dann halt auch andere Atem des Stratoren warnen,
   DEBUG: 2023-09-27 20:00:09,268:      pdf_renderer.py:  470: printSegment: vorwahren, dass sie möglicherweise dann relativ
   DEBUG: 2023-09-27 20:00:09,269:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,270:      pdf_renderer.py:  470: printSegment: 473 -   schnell reagieren können, dass sich ein Worm ein Virus
   DEBUG: 2023-09-27 20:00:09,270:      pdf_renderer.py:  470: printSegment: nicht so schnell ausbreiten kann und nicht so
   DEBUG: 2023-09-27 20:00:09,271:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,280:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame194522.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:09,299:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,300:      pdf_renderer.py:  470: printSegment: 474 -   maximal entscheiden anrichten kann. Hier ist nochmal ein Stück im Zeugot mit eingebauten, die
   DEBUG: 2023-09-27 20:00:09,301:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,301:      pdf_renderer.py:  470: printSegment: 475 -  
   DEBUG: 2023-09-27 20:00:09,302:      pdf_renderer.py:  470: printSegment: Folien, wo man so ein bisschen sehen kann, wie das ablieb, also im Wesentlichen, also dass die
   DEBUG: 2023-09-27 20:00:09,303:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,304:      pdf_renderer.py:  470: printSegment: 476 -   Routine,
   DEBUG: 2023-09-27 20:00:09,304:      pdf_renderer.py:  470: printSegment: wenn sie denn ausgeführt wurde, erstmal versucht hat sich umzubrennen, ja in Shell, was
   DEBUG: 2023-09-27 20:00:09,305:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,306:      pdf_renderer.py:  470: printSegment: 477 -   ich ja schon erzählt
   DEBUG: 2023-09-27 20:00:09,306:      pdf_renderer.py:  470: printSegment: hatte, was eine wichtige Täuschungsmaßnahme des Worms war, dann hat man
   DEBUG: 2023-09-27 20:00:09,307:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,307:      pdf_renderer.py:  470: printSegment: 478 -   gehorst, ob es noch andere
   DEBUG: 2023-09-27 20:00:09,308:      pdf_renderer.py:  470: printSegment: Würmer gibt im Umfeld, ja einfach um eben zu verhindern, dass man
   DEBUG: 2023-09-27 20:00:09,309:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,309:      pdf_renderer.py:  470: printSegment: 479 -   zu schnell sich fortpflanzt und im
   DEBUG: 2023-09-27 20:00:09,310:      pdf_renderer.py:  470: printSegment: Grunde, das erreichte es jetzt ja auch rot gedruckt,
   DEBUG: 2023-09-27 20:00:09,311:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,312:      pdf_renderer.py:  470: printSegment: 480 -   das Listen to other Worms war, dass die Prozedur, die
   DEBUG: 2023-09-27 20:00:09,312:      pdf_renderer.py:  470: printSegment: unter Prozedur, die etwas Fehlerhaft programmiert
   DEBUG: 2023-09-27 20:00:09,313:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,314:      pdf_renderer.py:  470: printSegment: 481 -   war und dann dazu geführt hat, dass eben nicht nur einer
   DEBUG: 2023-09-27 20:00:09,314:      pdf_renderer.py:  470: printSegment: von 15 verschiedene neu infiziert wurde,
   DEBUG: 2023-09-27 20:00:09,315:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,316:      pdf_renderer.py:  470: printSegment: 482 -   sondern 14 von 15, ja ansonsten kann man das jetzt hier nochmal so
   DEBUG: 2023-09-27 20:00:09,316:      pdf_renderer.py:  470: printSegment: durchgehen, man hat natürlich auch
   DEBUG: 2023-09-27 20:00:09,317:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,317:      pdf_renderer.py:  470: printSegment: 483 -   immer versucht zwischen durch meine Sleep-Funktion auszuführen,
   DEBUG: 2023-09-27 20:00:09,318:      pdf_renderer.py:  470: printSegment: damit Dinge nicht so schnell passieren,
   DEBUG: 2023-09-27 20:00:09,318:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,319:      pdf_renderer.py:  470: printSegment: 484 -   hier hat man dann versucht an einen anderen Account zu attacieren,
   DEBUG: 2023-09-27 20:00:09,320:      pdf_renderer.py:  470: printSegment: den man die Passwörter ausprobiert hat,
   DEBUG: 2023-09-27 20:00:09,320:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,321:      pdf_renderer.py:  470: printSegment: 485 -   dann dieses Staaten eines Tochterprozesses, ja, dass man eben hier
   DEBUG: 2023-09-27 20:00:09,322:      pdf_renderer.py:  470: printSegment: einfach mit anderen neuen
   DEBUG: 2023-09-27 20:00:09,323:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,323:      pdf_renderer.py:  470: printSegment: 486 -   Prozessen arbeitet und ja auch der Speicherverbrauch sollte eben reduziert
   DEBUG: 2023-09-27 20:00:09,324:      pdf_renderer.py:  470: printSegment: werden, weil so was auch
   DEBUG: 2023-09-27 20:00:09,324:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,325:      pdf_renderer.py:  470: printSegment: 487 -   auffällig ist, wenn ein Prozess auf dem System plötzlich extrem viel
   DEBUG: 2023-09-27 20:00:09,325:      pdf_renderer.py:  470: printSegment: Speicherverbrauch,
   DEBUG: 2023-09-27 20:00:09,326:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,326:      pdf_renderer.py:  470: printSegment: 488 -   deshalb wurde die Liste der Host, die potenziell immer angegriffen wurden, werden
   DEBUG: 2023-09-27 20:00:09,327:      pdf_renderer.py:  470: printSegment: sollten durch
   DEBUG: 2023-09-27 20:00:09,328:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,329:      pdf_renderer.py:  470: printSegment: 489 -   diesem Prozess wurde dann eben halt nach zwischendem auch mal gelöscht, ja einfach um dann
   DEBUG: 2023-09-27 20:00:09,329:      pdf_renderer.py:  470: printSegment: nicht wegen
   DEBUG: 2023-09-27 20:00:09,330:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,330:      pdf_renderer.py:  470: printSegment: 490 -   dem Verbrauch zu viel Betriebsmittel aufzufallen. Gut, was sind jetzt Maßnahmen gegen Wiren,
   DEBUG: 2023-09-27 20:00:09,331:      pdf_renderer.py:  470: printSegment: was kann man
   DEBUG: 2023-09-27 20:00:09,332:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,333:      pdf_renderer.py:  470: printSegment: 491 -   da unternehmen? Also ihnen ist sicherlich bekannt, dass man beispielsweise
   DEBUG: 2023-09-27 20:00:09,334:      pdf_renderer.py:  470: printSegment: Prüfsom-Programme einsetzen
   DEBUG: 2023-09-27 20:00:09,335:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,335:      pdf_renderer.py:  470: printSegment: 492 -   könnte, Wienz, Gänner oder eben dieses Principle auf least privilege, auf die
   DEBUG: 2023-09-27 20:00:09,336:      pdf_renderer.py:  470: printSegment: Dinge wollen wir jetzt
   DEBUG: 2023-09-27 20:00:09,337:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,338:      pdf_renderer.py:  470: printSegment: 493 -   mal kurz noch ein bisschen eingehen, also Prüfsom, Gender Wierung bedeutet
   DEBUG: 2023-09-27 20:00:09,338:      pdf_renderer.py:  470: printSegment: letztlich, dass sie so
   DEBUG: 2023-09-27 20:00:09,339:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,340:      pdf_renderer.py:  470: printSegment: 494 -   Integritätsstests einbauen. Hier ist es wichtig, dass natürlich so eine Prüfsomme nicht
   DEBUG: 2023-09-27 20:00:09,340:      pdf_renderer.py:  470: printSegment: durch den
   DEBUG: 2023-09-27 20:00:09,341:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,342:      pdf_renderer.py:  470: printSegment: 495 -   Angreiferselbst ohne weiteres erzeugt werden kann, ja und das kriegt man nur dadurch hin, dass
   DEBUG: 2023-09-27 20:00:09,342:      pdf_renderer.py:  470: printSegment: man
   DEBUG: 2023-09-27 20:00:09,343:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,344:      pdf_renderer.py:  470: printSegment: 496 -   eben auch cryptografische Erschfunktionen dort mit involviert, wie das genau geht, wenn wir uns im
   DEBUG: 2023-09-27 20:00:09,345:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,345:      pdf_renderer.py:  470: printSegment: 497 -   Detail noch anschauen, wendel haben sie darüber schon ein bisschen was auch gehört in dem Video
   DEBUG: 2023-09-27 20:00:09,346:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,346:      pdf_renderer.py:  470: printSegment: 498 -  
   DEBUG: 2023-09-27 20:00:09,347:      pdf_renderer.py:  470: printSegment: von der Annika Meyer, wo es ja auch um cryptografstarker Erschfunktion geht. Dann der Einsatz von
   DEBUG: 2023-09-27 20:00:09,347:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,348:      pdf_renderer.py:  470: printSegment: 499 -  
   DEBUG: 2023-09-27 20:00:09,349:      pdf_renderer.py:  470: printSegment: Signaturen ist natürlich eine Maßnahme, die da helfen kann, wenn wir die Programme eben mit der
   DEBUG: 2023-09-27 20:00:09,350:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,350:      pdf_renderer.py:  470: printSegment: 500 -  
   DEBUG: 2023-09-27 20:00:09,351:      pdf_renderer.py:  470: printSegment: cryptografischen Signature versehen und bevor das Programm ausgeführt wird und zwar jedes Mal
   DEBUG: 2023-09-27 20:00:09,352:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,353:      pdf_renderer.py:  470: printSegment: 501 -   bevor es
   DEBUG: 2023-09-27 20:00:09,354:      pdf_renderer.py:  470: printSegment: ausgeführt wird, überprüfen wir, ob die Signature dann noch korrekt ist oder ob sie irgendwie
   DEBUG: 2023-09-27 20:00:09,355:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,355:      pdf_renderer.py:  470: printSegment: 502 -   viele Haft
   DEBUG: 2023-09-27 20:00:09,356:      pdf_renderer.py:  470: printSegment: modifiziert sein könnte, dann wird einfach die Ausführung des Programms abgelehnt.
   DEBUG: 2023-09-27 20:00:09,356:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,357:      pdf_renderer.py:  470: printSegment: 503 -   Ja, Virenzgenner
   DEBUG: 2023-09-27 20:00:09,358:      pdf_renderer.py:  470: printSegment: basieren eben wie gesagt auf solchen Merkmalzwektoren, die man versucht zu
   DEBUG: 2023-09-27 20:00:09,359:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,360:      pdf_renderer.py:  470: printSegment: 504 -   identifizieren, hier stellt sich
   DEBUG: 2023-09-27 20:00:09,361:      pdf_renderer.py:  470: printSegment: natürlich das Problem, dass die Viren sich häufig eben dann
   DEBUG: 2023-09-27 20:00:09,361:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,362:      pdf_renderer.py:  470: printSegment: 505 -   verändern, also heißt wir können eigentlich
   DEBUG: 2023-09-27 20:00:09,362:      pdf_renderer.py:  470: printSegment: diesen Ansatz konsequent nur für nicht Polymorphen
   DEBUG: 2023-09-27 20:00:09,363:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,364:      pdf_renderer.py:  470: printSegment: 506 -   Viren einsetzen, wenn wir mit Polymorphen Viren zu
   DEBUG: 2023-09-27 20:00:09,364:      pdf_renderer.py:  470: printSegment: tun haben, was die meisten modernen Viren sind,
   DEBUG: 2023-09-27 20:00:09,365:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,366:      pdf_renderer.py:  470: printSegment: 507 -   dann müssen wir mit heuristigen Arbeiten, möglicherweise
   DEBUG: 2023-09-27 20:00:09,366:      pdf_renderer.py:  470: printSegment: auch mit KI-Methoden um eben auch dieses
   DEBUG: 2023-09-27 20:00:09,367:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,368:      pdf_renderer.py:  470: printSegment: 508 -   ständige Modifizieren, promotieren der Viren-Signaturen noch
   DEBUG: 2023-09-27 20:00:09,368:      pdf_renderer.py:  470: printSegment: zuordnen zu können. Ja und das
   DEBUG: 2023-09-27 20:00:09,369:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,370:      pdf_renderer.py:  470: printSegment: 509 -   prinzipiell auf die Sprügel etsch, bedeutet eben, dass jedes Programm auf
   DEBUG: 2023-09-27 20:00:09,370:      pdf_renderer.py:  470: printSegment: dem Rechner nur das tun
   DEBUG: 2023-09-27 20:00:09,371:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,371:      pdf_renderer.py:  470: printSegment: 510 -   können sollte, was es auch wirklich muss und wenn man das umsetzt, dann kann
   DEBUG: 2023-09-27 20:00:09,372:      pdf_renderer.py:  470: printSegment: man sogar sagen,
   DEBUG: 2023-09-27 20:00:09,372:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,373:      pdf_renderer.py:  470: printSegment: 511 -   dass so was wie Viren eigentlich in dem Sinne gar nicht mehr gibt, sondern Viren sind dann
   DEBUG: 2023-09-27 20:00:09,374:      pdf_renderer.py:  470: printSegment: 512 -   eigentlich so ähnlich wie transitive Trojanische Ferdin, weil bei diesen transitive Fortpflanzen
   DEBUG: 2023-09-27 20:00:09,374:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,375:      pdf_renderer.py:  470: printSegment: 513 -   der
   DEBUG: 2023-09-27 20:00:09,376:      pdf_renderer.py:  470: printSegment: Trojanischen Ferdin hatten wir ja immer gesagt, das entsteht dadurch, dass wir eben in
   DEBUG: 2023-09-27 20:00:09,377:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,378:      pdf_renderer.py:  470: printSegment: 514 -   Wildungswerkzeuge
   DEBUG: 2023-09-27 20:00:09,379:      pdf_renderer.py:  470: printSegment: beispielsweise haben wie Kompiler, die ja natürlich ein Schreibrecht auf ihren
   DEBUG: 2023-09-27 20:00:09,379:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,380:      pdf_renderer.py:  470: printSegment: 515 -   Kindern sozusagen den
   DEBUG: 2023-09-27 20:00:09,381:      pdf_renderer.py:  470: printSegment: Programmen, die sie erzeugen haben müssen und das heißt, das ist etwas,
   DEBUG: 2023-09-27 20:00:09,381:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,382:      pdf_renderer.py:  470: printSegment: 516 -   was man bei diesem Maßnahmen
   DEBUG: 2023-09-27 20:00:09,382:      pdf_renderer.py:  470: printSegment: sozusagen ja weiter erlauben muss. Das kann man nicht verbieten,
   DEBUG: 2023-09-27 20:00:09,383:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,384:      pdf_renderer.py:  470: printSegment: 517 -   ja auch wenn man seinen Programm halt
   DEBUG: 2023-09-27 20:00:09,384:      pdf_renderer.py:  470: printSegment: sicherer machen will, wenn es eine Schreibfunksionalität ist,
   DEBUG: 2023-09-27 20:00:09,385:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,385:      pdf_renderer.py:  470: printSegment: 518 -   die für die normalen Ablauf des Programms
   DEBUG: 2023-09-27 20:00:09,386:      pdf_renderer.py:  470: printSegment: notwendig ist, dann kann man die nicht unterbinden und
   DEBUG: 2023-09-27 20:00:09,387:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,387:      pdf_renderer.py:  470: printSegment: 519 -   kommt man dann eben zu diesen sogenannten
   DEBUG: 2023-09-27 20:00:09,388:      pdf_renderer.py:  470: printSegment: transitive Trojanischen Ferdin. Also hier ist es nochmal
   DEBUG: 2023-09-27 20:00:09,389:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,398:      pdf_renderer.py:  235: /mnt/c/Users/proto/Development/extract_data_from_video/data/frame213427.jpg, 1428, 1066
   DEBUG: 2023-09-27 20:00:09,411:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,412:      pdf_renderer.py:  470: printSegment: 520 -   so ein bisschen populistisch aufbereitet, einem
   DEBUG: 2023-09-27 20:00:09,413:      pdf_renderer.py:  470: printSegment: Beispiel ist es in das Nachbildung aus dem Fizmanns
   DEBUG: 2023-09-27 20:00:09,414:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,414:      pdf_renderer.py:  470: printSegment: 521 -   Grip, also stellen sich vor, sie haben ein
   DEBUG: 2023-09-27 20:00:09,415:      pdf_renderer.py:  470: printSegment: Computer-Virus hier vom Programm A und der hat jetzt einen
   DEBUG: 2023-09-27 20:00:09,415:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,416:      pdf_renderer.py:  470: printSegment: 522 -   unnötigen Schreibzugriff auf ein anderes
   DEBUG: 2023-09-27 20:00:09,417:      pdf_renderer.py:  470: printSegment: Programm, ja der wirklich eigentlich überhaupt nicht notwendig
   DEBUG: 2023-09-27 20:00:09,417:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,418:      pdf_renderer.py:  470: printSegment: 523 -   wäre, dann kann er sich natürlich ausbreiten,
   DEBUG: 2023-09-27 20:00:09,419:      pdf_renderer.py:  470: printSegment: kann das andere Programm auch infizieren, aber hier wurde
   DEBUG: 2023-09-27 20:00:09,419:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,420:      pdf_renderer.py:  470: printSegment: 524 -   sozusagen das Prinzip der gerindsmöglichen
   DEBUG: 2023-09-27 20:00:09,420:      pdf_renderer.py:  470: printSegment: Privilegierung vom Programm A verletzt. Im unteren Fall
   DEBUG: 2023-09-27 20:00:09,421:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,422:      pdf_renderer.py:  470: printSegment: 525 -   hingegen ist es so, da haben wir einen notwendigen
   DEBUG: 2023-09-27 20:00:09,422:      pdf_renderer.py:  470: printSegment: Schreibzugriff, nämlich wenn ein Programm A ein
   DEBUG: 2023-09-27 20:00:09,423:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,424:      pdf_renderer.py:  470: printSegment: 526 -   Kompiler ist oder ein Editor, dann ist es ja klar, dass der
   DEBUG: 2023-09-27 20:00:09,424:      pdf_renderer.py:  470: printSegment: irgendwelche anderen Programme auch
   DEBUG: 2023-09-27 20:00:09,425:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,425:      pdf_renderer.py:  470: printSegment: 527 -   schreiben können muss und in dem Fall kann sich eben dann die
   DEBUG: 2023-09-27 20:00:09,426:      pdf_renderer.py:  470: printSegment: Schadstoffe ja auch fortpflanzen und
   DEBUG: 2023-09-27 20:00:09,427:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,427:      pdf_renderer.py:  470: printSegment: 528 -   deshalb sind eben transitive Trojanische Ferdin, dann sozusagen der
   DEBUG: 2023-09-27 20:00:09,428:      pdf_renderer.py:  470: printSegment: Terminus, der eben genau diesen
   DEBUG: 2023-09-27 20:00:09,428:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,429:      pdf_renderer.py:  470: printSegment: 529 -   Sachverhalt beschreibt, dass sich die Schadstoffe hier transitive
   DEBUG: 2023-09-27 20:00:09,430:      pdf_renderer.py:  470: printSegment: weiterentwickeln kann.
   DEBUG: 2023-09-27 20:00:09,431:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,432:      pdf_renderer.py:  470: printSegment: 530 -   Ja, was sind jetzt die konsequenten für die erreichbare Sicherheit? Erst mal muss man
   DEBUG: 2023-09-27 20:00:09,433:      pdf_renderer.py:  470: printSegment: 531 -   sagen, dass es für Wien
   DEBUG: 2023-09-27 20:00:09,433:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2023-09-27 20:00:09,434:      pdf_renderer.py:  470: printSegment: s gänner oder andere Überwachungsprogramme wirklich nicht entscheidbar ist,
   DEBUG: 2023-09-27 20:00:09,435:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,436:      pdf_renderer.py:  470: printSegment: 532 - 
   DEBUG: 2023-09-27 20:00:09,436:      pdf_renderer.py:  470: printSegment:  ja, am matematischen Sinne, ob ein Programm wirklich ein Computer Virus oder ein Trojanisches Fert ist
   DEBUG: 2023-09-27 20:00:09,437:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,437:      pdf_renderer.py:  470: printSegment: 533 -  
   DEBUG: 2023-09-27 20:00:09,438:      pdf_renderer.py:  470: printSegment: oder nicht. Das ist erstmal schon ein großes Problem, ja, also wir können nur sozusagen die
   DEBUG: 2023-09-27 20:00:09,439:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,440:      pdf_renderer.py:  470: printSegment: 534 -  
   DEBUG: 2023-09-27 20:00:09,441:      pdf_renderer.py:  470: printSegment: Wahrscheinlichkeiten, dass wir solche Wien und Trojanischen Fertre auf unserem System haben reduzieren,
   DEBUG: 2023-09-27 20:00:09,441:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,442:      pdf_renderer.py:  470: printSegment: 535 -  
   DEBUG: 2023-09-27 20:00:09,443:      pdf_renderer.py:  470: printSegment: weil ja herriste Schömethoden haben, um sowas zu erkennen, aber wir können es nicht ganz ausschließen,
   DEBUG: 2023-09-27 20:00:09,443:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,444:      pdf_renderer.py:  470: printSegment: 536 -  
   DEBUG: 2023-09-27 20:00:09,444:      pdf_renderer.py:  470: printSegment: das können wir einfach nicht. Deshalb die Frage können wir zum Beispiel wenigstens die bekannten
   DEBUG: 2023-09-27 20:00:09,445:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,446:      pdf_renderer.py:  470: printSegment: 537 -   Wiener
   DEBUG: 2023-09-27 20:00:09,447:      pdf_renderer.py:  470: printSegment: kennen und zwar immer erkennen. Da muss man sagen, auch das geht nicht immer, weil sich die
   DEBUG: 2023-09-27 20:00:09,448:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,449:      pdf_renderer.py:  470: printSegment: 538 -   Wien halt
   DEBUG: 2023-09-27 20:00:09,450:      pdf_renderer.py:  470: printSegment: selbst wenn wir sich schon kennen, immer wieder auch selbst modifizieren können und dann
   DEBUG: 2023-09-27 20:00:09,451:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,452:      pdf_renderer.py:  470: printSegment: 539 -   kann es eben
   DEBUG: 2023-09-27 20:00:09,453:      pdf_renderer.py:  470: printSegment: dazu führen, dass wir sie vielleicht nicht finden. Gleiches geht übrigens für die
   DEBUG: 2023-09-27 20:00:09,453:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,454:      pdf_renderer.py:  470: printSegment: 540 -   Trojanischen Fertre ganz
   DEBUG: 2023-09-27 20:00:09,455:      pdf_renderer.py:  470: printSegment: genau so. Jetzt ist die Frage, können wir die Modifikationsalgerutmus
   DEBUG: 2023-09-27 20:00:09,455:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,456:      pdf_renderer.py:  470: printSegment: 541 -   wenigstens irgendwie erkennen und
   DEBUG: 2023-09-27 20:00:09,456:      pdf_renderer.py:  470: printSegment: daraus vielleicht dann ableiten mit unseren intelligenten
   DEBUG: 2023-09-27 20:00:09,457:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,458:      pdf_renderer.py:  470: printSegment: 542 -   Überwachungswerkzeugen, ob eine modifizierte
   DEBUG: 2023-09-27 20:00:09,458:      pdf_renderer.py:  470: printSegment: Form des Virus auf unserem System ist. Auch das können
   DEBUG: 2023-09-27 20:00:09,459:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,459:      pdf_renderer.py:  470: printSegment: 543 -   wir halt nicht im allgemeinen immer kühl machen,
   DEBUG: 2023-09-27 20:00:09,460:      pdf_renderer.py:  470: printSegment: weil eben der Modifikationsalgerutmus oft auch
   DEBUG: 2023-09-27 20:00:09,461:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,461:      pdf_renderer.py:  470: printSegment: 544 -   verschlüsselt ist. Und wenn wir denen nicht kennen, dann
   DEBUG: 2023-09-27 20:00:09,462:      pdf_renderer.py:  470: printSegment: können wir auch diese Vorhersagen
   DEBUG: 2023-09-27 20:00:09,462:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,463:      pdf_renderer.py:  470: printSegment: 545 -   bezüglich der Modifikation nicht machen. So was können wir denn
   DEBUG: 2023-09-27 20:00:09,464:      pdf_renderer.py:  470: printSegment: trotzdem tun?
   DEBUG: 2023-09-27 20:00:09,465:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,466:      pdf_renderer.py:  470: printSegment: 546 -   Im Grunde ist das jetzt hier so ein bisschen eine Antwort in Richtung Software Engineering
   DEBUG: 2023-09-27 20:00:09,467:      pdf_renderer.py:  470: printSegment: oder
   DEBUG: 2023-09-27 20:00:09,468:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,468:      pdf_renderer.py:  470: printSegment: 547 -   Security Engineering. Also wir sollten immer sehr genau spezifizieren, was ein Programm leisten soll
   DEBUG: 2023-09-27 20:00:09,469:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,470:      pdf_renderer.py:  470: printSegment: 548 -   und was es nicht tun darf. Das ist ja auch die Grundlage für dieses Prinzip der geringsten
   DEBUG: 2023-09-27 20:00:09,471:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,471:      pdf_renderer.py:  470: printSegment: 549 -   möglichen
   DEBUG: 2023-09-27 20:00:09,472:      pdf_renderer.py:  470: printSegment: Priviligierung der Programme. Wenn wir gar nicht genau wissen, was unser Programm wirklich
   DEBUG: 2023-09-27 20:00:09,473:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,473:      pdf_renderer.py:  470: printSegment: 550 -   alles können
   DEBUG: 2023-09-27 20:00:09,474:      pdf_renderer.py:  470: printSegment: muss und was nicht, dann können wir im Grunde das ja hier auch gar nicht umsetzen.
   DEBUG: 2023-09-27 20:00:09,475:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,475:      pdf_renderer.py:  470: printSegment: 551 -   Ja, dann sollten wir
   DEBUG: 2023-09-27 20:00:09,476:      pdf_renderer.py:  470: printSegment: natürlich nachweisen, dass unsere Spezifikation auch in der Implementierung
   DEBUG: 2023-09-27 20:00:09,477:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,477:      pdf_renderer.py:  470: printSegment: 552 -   korrekt umgesetzt worden ist,
   DEBUG: 2023-09-27 20:00:09,478:      pdf_renderer.py:  470: printSegment: dass auch so ein generelles Prinzip des Software Engineering und im
   DEBUG: 2023-09-27 20:00:09,478:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,479:      pdf_renderer.py:  470: printSegment: 553 -   Nachhinein sollten wir natürlich
   DEBUG: 2023-09-27 20:00:09,480:      pdf_renderer.py:  470: printSegment: schauen, ob es irgendwelche Informationen Skamenele gibt, die
   DEBUG: 2023-09-27 20:00:09,480:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,481:      pdf_renderer.py:  470: printSegment: 554 -   sogenannten Kavadschennels im System.
   DEBUG: 2023-09-27 20:00:09,482:      pdf_renderer.py:  470: printSegment: Aber wie gesagt, da ist die Erkennungsmöglichkeit auch
   DEBUG: 2023-09-27 20:00:09,482:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,483:      pdf_renderer.py:  470: printSegment: 555 -   begrenzt, man kann ja nicht jeden Kanal erkennen.
   DEBUG: 2023-09-27 20:00:09,484:      pdf_renderer.py:  470: printSegment: Ja, es gibt jetzt verschiedene Schutzmasnahmen,
   DEBUG: 2023-09-27 20:00:09,485:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,486:      pdf_renderer.py:  470: printSegment: 556 -   die man einleiten kann, physische und logische
   DEBUG: 2023-09-27 20:00:09,487:      pdf_renderer.py:  470: printSegment: Schutzmasnahmen und ja zu dem Punkt würde ich
   DEBUG: 2023-09-27 20:00:09,487:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,488:      pdf_renderer.py:  470: printSegment: 557 -   vielleicht noch ganz kurz ein bisschen was erzielen
   DEBUG: 2023-09-27 20:00:09,489:      pdf_renderer.py:  470: printSegment: wollen. Also eine Möglichkeit im Grunde so
   DEBUG: 2023-09-27 20:00:09,489:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,490:      pdf_renderer.py:  470: printSegment: 558 -   logischer Schutz zu realisieren, während Zugangskontrollen zu
   DEBUG: 2023-09-27 20:00:09,490:      pdf_renderer.py:  470: printSegment: den System und Zugriffskontrolle,
   DEBUG: 2023-09-27 20:00:09,491:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,491:      pdf_renderer.py:  470: printSegment: 559 -   eine Möglichkeit, um von Personen Zugangskontrollen zu machen, geht
   DEBUG: 2023-09-27 20:00:09,492:      pdf_renderer.py:  470: printSegment: natürlich über solche Identifikationsverfahren,
   DEBUG: 2023-09-27 20:00:09,493:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,493:      pdf_renderer.py:  470: printSegment: 560 -   die sie auch alle kennen. Ja, da kann man sich dann darüber
   DEBUG: 2023-09-27 20:00:09,494:      pdf_renderer.py:  470: printSegment: nachdenken, welche biometrischen
   DEBUG: 2023-09-27 20:00:09,495:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,496:      pdf_renderer.py:  470: printSegment: 561 -   Eigenschaften zum Beispiel hat ein Mensch. Ja, man könnte eben seine
   DEBUG: 2023-09-27 20:00:09,496:      pdf_renderer.py:  470: printSegment: Stimme zur Authentifizierung nutzen,
   DEBUG: 2023-09-27 20:00:09,497:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,497:      pdf_renderer.py:  470: printSegment: 562 -   Retina, Muster, Unterschriften, Handgärm, Geometrie. Also es sind
   DEBUG: 2023-09-27 20:00:09,498:      pdf_renderer.py:  470: printSegment: natürlich alles Teile, die sind mehr oder
   DEBUG: 2023-09-27 20:00:09,498:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,499:      pdf_renderer.py:  470: printSegment: 563 -   weniger gut geeignet, um einen Menschen eindeutig zu
   DEBUG: 2023-09-27 20:00:09,499:      pdf_renderer.py:  470: printSegment: identifizieren. Aber es gibt da eben halt auch viele
   DEBUG: 2023-09-27 20:00:09,500:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,501:      pdf_renderer.py:  470: printSegment: 564 -   innovative Techniken mittlerweile, die da immer mehr
   DEBUG: 2023-09-27 20:00:09,502:      pdf_renderer.py:  470: printSegment: Versuchungen voranzuschreiten. Dann kann man
   DEBUG: 2023-09-27 20:00:09,503:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,504:      pdf_renderer.py:  470: printSegment: 565 -   natürlich auch Hilfsmittel nutzen, die ein Mensch eben
   DEBUG: 2023-09-27 20:00:09,505:      pdf_renderer.py:  470: printSegment: besitzt und andere Menschen nicht besitzen.
   DEBUG: 2023-09-27 20:00:09,505:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,506:      pdf_renderer.py:  470: printSegment: 566 -   Das sind dann eben diese hier, dass man irgendwelche
   DEBUG: 2023-09-27 20:00:09,507:      pdf_renderer.py:  470: printSegment: Dokumente besitzt, irgendwelche Schlüsselbesitz,
   DEBUG: 2023-09-27 20:00:09,507:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,508:      pdf_renderer.py:  470: printSegment: 567 -   Karten, Rechner oder aber möglicherweise kennt man
   DEBUG: 2023-09-27 20:00:09,508:      pdf_renderer.py:  470: printSegment: auch irgendwelche Geheimnisse. Und das sind dann
   DEBUG: 2023-09-27 20:00:09,509:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,509:      pdf_renderer.py:  470: printSegment: 568 -   ein paar, das wird da irgendwelche Fragen, die man nur
   DEBUG: 2023-09-27 20:00:09,510:      pdf_renderer.py:  470: printSegment: selber beantworten kann und niemand sonst,
   DEBUG: 2023-09-27 20:00:09,510:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,511:      pdf_renderer.py:  470: printSegment: 569 -   weil da eben die Antwort darauf nicht kennen kann und ähnlich
   DEBUG: 2023-09-27 20:00:09,512:      pdf_renderer.py:  470: printSegment: ist. Wenn wir jetzt mal davon ausgehen,
   DEBUG: 2023-09-27 20:00:09,512:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,513:      pdf_renderer.py:  470: printSegment: 570 -   dass ich hier zwei Rechner miteinander identifizieren sollen, dann
   DEBUG: 2023-09-27 20:00:09,513:      pdf_renderer.py:  470: printSegment: würde man natürlich jetzt nicht
   DEBUG: 2023-09-27 20:00:09,514:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,514:      pdf_renderer.py:  470: printSegment: 571 -   mit biometrischen Daten arbeiten, sondern man würde vielleicht so eine
   DEBUG: 2023-09-27 20:00:09,515:      pdf_renderer.py:  470: printSegment: Authentifizierung auch über so ein
   DEBUG: 2023-09-27 20:00:09,515:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,516:      pdf_renderer.py:  470: printSegment: 572 -   Geheimnis machen, dass man sagt, wir haben jetzt einen Rechner, der
   DEBUG: 2023-09-27 20:00:09,517:      pdf_renderer.py:  470: printSegment: kennt ein Schlüssel K und der
   DEBUG: 2023-09-27 20:00:09,517:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,518:      pdf_renderer.py:  470: printSegment: 573 -   andere Rechner kennt diesen Schlüssel K auch und jetzt möchte der eine
   DEBUG: 2023-09-27 20:00:09,519:      pdf_renderer.py:  470: printSegment: Rechner, dass der andere ihm
   DEBUG: 2023-09-27 20:00:09,520:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,520:      pdf_renderer.py:  470: printSegment: 574 -   beweist, dass er auch wirklich diesen selben Schlüssel kennt, weil das ihr
   DEBUG: 2023-09-27 20:00:09,521:      pdf_renderer.py:  470: printSegment: gemeinsam es geheimnis ist
   DEBUG: 2023-09-27 20:00:09,522:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,523:      pdf_renderer.py:  470: printSegment: 575 -   und niemand sonst eben diesen Schlüssel kennen sollte. Und in dem
   DEBUG: 2023-09-27 20:00:09,523:      pdf_renderer.py:  470: printSegment: Zusammenhang würde man jetzt,
   DEBUG: 2023-09-27 20:00:09,524:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,524:      pdf_renderer.py:  470: printSegment: 576 -   beispielsweise so ein Protokollablauf hier ablaufen lassen können, dass
   DEBUG: 2023-09-27 20:00:09,525:      pdf_renderer.py:  470: printSegment: man sagt, man generiert
   DEBUG: 2023-09-27 20:00:09,525:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,526:      pdf_renderer.py:  470: printSegment: 577 -   beispielsweise eine Zufallzahl als das IT-System A und versendet diese Zufallzahl
   DEBUG: 2023-09-27 20:00:09,527:      pdf_renderer.py:  470: printSegment: an das andere System B
   DEBUG: 2023-09-27 20:00:09,527:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,528:      pdf_renderer.py:  470: printSegment: 578 -   und dann verschlüsselt man die Zufallzahl als IT-System B und schickt das wieder
   DEBUG: 2023-09-27 20:00:09,528:      pdf_renderer.py:  470: printSegment: zurück an System A
   DEBUG: 2023-09-27 20:00:09,529:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,530:      pdf_renderer.py:  470: printSegment: 579 -   und das System A ist dadurch natürlich in der Lage zu prüfen, weil es ja den selben
   DEBUG: 2023-09-27 20:00:09,530:      pdf_renderer.py:  470: printSegment: Schlüssel K hat
   DEBUG: 2023-09-27 20:00:09,531:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,531:      pdf_renderer.py:  470: printSegment: 580 -   mit dem ihr die Zufallzahl verschlüsselt wurde, kann als die System A das eben wieder
   DEBUG: 2023-09-27 20:00:09,532:      pdf_renderer.py:  470: printSegment: entschlüsseln und
   DEBUG: 2023-09-27 20:00:09,533:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,533:      pdf_renderer.py:  470: printSegment: 581 -   kann dann überprüfen, ob die zuvor versendete Zufallzahl mit der Übereinstimmend die
   DEBUG: 2023-09-27 20:00:09,534:      pdf_renderer.py:  470: printSegment: jetzt wieder zurückgeschickt wurde.
   DEBUG: 2023-09-27 20:00:09,534:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,535:      pdf_renderer.py:  470: printSegment: 582 -   Wenn das der Fall ist, kann das System A davon ausgehen, dass das
   DEBUG: 2023-09-27 20:00:09,536:      pdf_renderer.py:  470: printSegment: System B tatsächlich diesen Schlüssel auch
   DEBUG: 2023-09-27 20:00:09,536:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,537:      pdf_renderer.py:  470: printSegment: 583 -   kennt. Jetzt ist dieses Protokoll in dieser naivem Form erstmal so
   DEBUG: 2023-09-27 20:00:09,538:      pdf_renderer.py:  470: printSegment: nicht sicher. Und zwar ist hier
   DEBUG: 2023-09-27 20:00:09,539:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,540:      pdf_renderer.py:  470: printSegment: 584 -   der sogenannte Spiegelangriff möglich und ich möchte an der Stelle mal
   DEBUG: 2023-09-27 20:00:09,540:      pdf_renderer.py:  470: printSegment: abbrechen, sie können
   DEBUG: 2023-09-27 20:00:09,541:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,542:      pdf_renderer.py:  470: printSegment: 585 -   mal selber versuchen, wie man durch einen Ablauf in beiden Richtungen versuchen
   DEBUG: 2023-09-27 20:00:09,542:      pdf_renderer.py:  470: printSegment: kann, so ein relativ
   DEBUG: 2023-09-27 20:00:09,543:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,543:      pdf_renderer.py:  470: printSegment: 586 -   einfachen naivem Vorgang zu durchbrechen in dem Sinne, dass dann sozusagen auch
   DEBUG: 2023-09-27 20:00:09,544:      pdf_renderer.py:  470: printSegment: wenn man
   DEBUG: 2023-09-27 20:00:09,544:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,545:      pdf_renderer.py:  470: printSegment: 587 -   den Schlüssel K hat nicht kennt, ja das gemeinsam geheimnis nicht kennt, man eben die richtige
   DEBUG: 2023-09-27 20:00:09,546:      pdf_renderer.py:  470: printSegment: Antwort schicken
   DEBUG: 2023-09-27 20:00:09,546:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,547:      pdf_renderer.py:  470: printSegment: 588 -   könnte. Gut, das soll es vor heute gewesen sein. Wir hören uns wieder nächste Woche und
   DEBUG: 2023-09-27 20:00:09,548:      pdf_renderer.py:  470: printSegment: dann
   DEBUG: 2023-09-27 20:00:09,548:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-09-27 20:00:09,549:      pdf_renderer.py:  470: printSegment: 589 -   wird es dann eben ein Buffer Oberfluss gehen.
